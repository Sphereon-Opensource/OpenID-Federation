openapi: 3.0.3
info:
  title: OpenID Federation API
  description: This API allows the interaction with federation endpoints to manage and verify entities within a federation.
  contact:
    name: Sphereon
    email: info@sphereon.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
  version: 1.0.0-d40
tags:
  - name: federation
    description: Federation endpoints.
  - name: api
    description: Unprotected API endpoints.
  - name: admin
    description: Endpoints accessible by admins.
servers:
  - description: SwaggerHub API Auto Mocking
    url: 'https://virtserver.swaggerhub.com/SphereonInt/OpenIDFederationAPI/1.0.0-d40'
paths:
  /status:
    get:
      tags:
        - api
      summary: Check node status
      description: Check the status of the Federated Node.
      responses:
        '200':
          description: Successful status check
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                serverError:
                  summary: Server error example
                  value:
                    error: server_error
                    error_description: The server encountered an unexpected condition that prevented it from fulfilling the request.
      operationId: ''
      x-internal: false
  /.well-known/openid-federation:
    get:
      tags:
        - federation
      summary: Fetch Entity Statement
      description: Fetch Entity Configuration Statement.
      responses:
        '200':
          description: Successful fetch of Entity Statement
          content:
            application/entity-statement+jwt:
              schema:
                type: string
                description: A signed JWT containing the Entity Configuration Statement
              examples:
                Example 1:
                  value: eyJraWQiIwY0tSTlpnV0FqWjVBcTcyYnpSVFhDOHBCbU1DRG0tNlA0NWFHbURveVU0IiwidHlwIjoiZW50aXR5LXN0YXRlbWVudCtqd3QiLCJhbGciOiJFUzI1NiJ9.eyJzdWIiiJodHRwczovL2FnZW50LmZpbmR5bmV0LmRlbW8uc3BoZXJlb24uY29tL29pZDR2Y2kiLCJtZXRhZGF0YSI6e30sImp3a3MiOnsia2V5cyI6W3sia3R5IjoiRUMiLCJraWQiOiIwY0tSTlpnV0FqWjVBcTyYnpSVFhDOHBCbU1DRG0tNlA0NWFHbURveVU0IiwiY3J2joiUC0yNTYiLCJ4IjoiS1JNMXI5S3d0cXRzWVdiTGJPdmIzQ1ZxWF9iTm9vTlJORkRrRTQzSlpZQSIsInkiOiJZbUVYNWY4VndFOS1KYms3aHhwdnMzdlhUc3hOUVhHR2pZRE11SjhUYmlzIiwiYWxnIjoiRVMyNTYiLCJ1c2UiOiJzaWcifV19LCJpc3MiOiJodHRwczovL2FnZW50LmZpbmR5bmV0LmRlbW8uc3BoZXJlb24uY29tL29pZDR2Y2kiLCJhdXRob3JpdHlfaGludHMiOlsiaHR0cHM6Ly9mZWRlcmF0aW9uLmRlbW8uc3BoZXJlb24uY29tIl0sImV4cCI6MTc2MjI3MjY1MywiaWF0IjoxNzMwNzM2NjUzfQ.Vet8M8FZe3VSn8AsqeJyMvGP_6gC9DAOSxqzOYytzfCQrF2TmSjRb8ICRzFiP3Vt53S-KScJUrF-eDiyDw
        '404':
          description: Entity Statement not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                notFound:
                  summary: Entity Statement not found example
                  value:
                    error: not_found
                    error_description: The requested Entity Statement could not be found for the provided issuer and subject.
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                serverError:
                  summary: Server error example
                  value:
                    error: server_error
                    error_description: The server encountered an unexpected condition that prevented it from fulfilling the request.
  /list:
    get:
      tags:
        - federation
      summary: List Subordinates
      description: List the entity Subordinates for the specified criteria.
      parameters:
        - name: entity_type
          in: query
          description: 'The value of this parameter is an Entity Type Identifier. If the responder knows the Entity Types of its Immediate Subordinates, the result MUST be filtered to include only those that include the specified Entity Type.'
          required: false
          schema:
            type: string
        - name: trust_marked
          in: query
          description: 'If the parameter trust_marked is present and set to true, the result contains only the Immediate Subordinates for which at least one Trust Mark have been issued and is still valid.'
          required: false
          schema:
            type: boolean
        - name: trust_mark_id
          in: query
          description: 'The value of this parameter is a Trust Mark identifier. If the responder has issued Trust Marks with the specified Trust Mark identifier, the list in the response is filtered to include only the Immediate Subordinates for which that Trust Mark identifier has been issued and is still valid.'
          required: false
          schema:
            type: string
        - name: intermediate
          in: query
          description: 'If the parameter intermediate is present and set to true, then if the responder knows whether its Immediate Subordinates are Intermediates or not, the result MUST be filtered accordingly.'
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: Successful fetch of Subordinates
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  format: uri
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                invalidRequest:
                  summary: Invalid request example
                  value:
                    error: invalid_request
                    error_description: The request is incomplete or does not comply with current specifications.
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                serverError:
                  summary: Server error example
                  value:
                    error: server_error
                    error_description: The server encountered an unexpected condition that prevented it from fulfilling the request.
      security: [ ]
  /fetch:
    get:
      tags:
        - federation
      summary: Fetch Subordinate Statement
      description: Fetch the Subordinate Statement issued by a specified entity `iss` for a subordinate entity `sub``.
      parameters:
        - name: sub
          in: query
          description: The subject identifier (URI) of the entity for whom the Subordinate Statement is created.
          required: true
          schema:
            type: string
            format: uri
      responses:
        '200':
          description: Successful fetch of the Subordinate Statement
          content:
            application/resolve-response+jwt:
              schema:
                $ref: '#/components/schemas/SubordinateStatement'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                invalidRequest:
                  summary: Invalid request example
                  value:
                    error: invalid_request
                    error_description: The request is incomplete or does not comply with current specifications.
        '404':
          description: Subordinate Statement not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                notFound:
                  summary: Statement not found example
                  value:
                    error: statement_not_found
                    error_description: The specified Subordinate Statement could not be found.
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                serverError:
                  summary: Server error example
                  value:
                    error: server_error
                    error_description: The server encountered an unexpected condition that prevented it from fulfilling the request.
      security: [ ]
  /resolve:
    get:
      tags:
        - federation
      summary: Resolve Entity Statement
      description: Resolve metadata and Trust Marks for an Entity.
      parameters:
        - name: sub
          in: query
          description: The Entity Identifier of the Entity whose resolved data is requested.
          required: true
          schema:
            type: string
        - name: anchor
          in: query
          description: The Trust Anchor that the resolve endpoint MUST use when resolving the metadata. The value is an Entity identifier.
          required: true
          schema:
            type: string
        - name: type
          in: query
          description: 'A specific Entity Type to resolve. Its value is an Entity Type Identifier. If this parameter is not present, then all Entity Types are returned.'
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Successful resolve of Entity metadata
          content:
            application/resolve-response+jwt:
              schema:
                $ref: '#/components/schemas/ResolveResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                invalidRequest:
                  summary: Invalid request example
                  value:
                    error: invalid_request
                    error_description: The request is incomplete or does not comply with current specifications.
        '404':
          description: Entity not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                notFound:
                  summary: Entity not found example
                  value:
                    error: not_found
                    error_description: The requested Entity could not be found for the provided parameters.
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                serverError:
                  summary: Server error example
                  value:
                    error: server_error
                    error_description: The server encountered an unexpected condition that prevented it from fulfilling the request.
  /trust-mark:
    get:
      tags:
        - federation
      summary: Get Trust Mark
      description: Retrieve a specific Trust Mark.
      parameters:
        - name: trust_mark_id
          in: query
          description: Trust Mark identifier.
          required: true
          schema:
            type: string
        - name: sub
          in: query
          description: The Entity Identifier of the Entity to which the Trust Mark is issued.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful retrieval of Trust Mark
          content:
            application/trust-mark+jwt:
              schema:
                type: string
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                invalidRequest:
                  summary: Invalid request example
                  value:
                    error: invalid_request
                    error_description: The request is incomplete or does not comply with current specifications.
        '404':
          description: Trust Mark not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                notFound:
                  summary: Trust Mark not found example
                  value:
                    error: not_found
                    error_description: The requested Trust Mark could not be found for the provided parameters.
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                serverError:
                  summary: Server error example
                  value:
                    error: server_error
                    error_description: The server encountered an unexpected condition that prevented it from fulfilling the request.
  /trust-mark-status:
    get:
      tags:
        - federation
      summary: Check Trust Mark Status
      description: Check if a Trust Mark is still active.
      parameters:
        - name: sub
          in: query
          required: true
          schema:
            type: string
          description: The Entity Identifier of the Entity to which the Trust Mark was issued.
        - name: trust_mark_id
          in: query
          required: true
          schema:
            type: string
          description: Identifier of the Trust Mark.
        - name: iat
          in: query
          required: false
          schema:
            type: integer
          description: |
            Time when the Trust Mark was issued. 
            If not specified and the Trust Mark issuer has issued several Trust Marks 
            with the specified identifier for the Entity identified by `sub`, the most recent one is assumed.
        - name: trust_mark
          in: query
          required: true
          schema:
            type: string
          description: The whole Trust Mark in its JWT form.
      responses:
        '200':
          description: Trust Mark status
          content:
            application/json:
              schema:
                type: object
                properties:
                  active:
                    type: boolean
                    description: Whether the Trust Mark is active or not.
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                invalidRequest:
                  summary: Invalid request example
                  value:
                    error: invalid_request
                    error_description: The request is incomplete or does not comply with current specifications.
        '404':
          description: Trust Mark not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                notFound:
                  summary: Trust Mark not found example
                  value:
                    error: not_found
                    error_description: The requested Trust Mark could not be found for the provided parameters.
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                serverError:
                  summary: Server error example
                  value:
                    error: server_error
                    error_description: The server encountered an unexpected condition that prevented it from fulfilling the request.
  /trust-mark-list:
    get:
      tags:
        - federation
      summary: List Trust Marked Entities
      description: List all Entities for which Trust Marks have been issued and are still valid.
      parameters:
        - name: trust_mark_id
          in: query
          description: 'Trust Mark identifier to filter by. If the responder has issued Trust Marks with the specified Trust Mark identifier, the list in the response is filtered to include only the Entities for which that Trust Mark identifier has been issued and is still valid.'
          required: true
          schema:
            type: string
        - name: sub
          in: query
          description: The Entity Identifier of the Entity to which the Trust Mark was issued. The list obtained in the response MUST be filtered to only the Entity matching this value.
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Successful fetch of Trust Marked Entities
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  format: uri
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                invalidRequest:
                  summary: Invalid request example
                  value:
                    error: invalid_request
                    error_description: The request is incomplete or does not comply with current specifications.
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                serverError:
                  summary: Server error example
                  value:
                    error: server_error
                    error_description: The server encountered an unexpected condition that prevented it from fulfilling the request.
  /historical-keys:
    get:
      tags:
        - federation
      summary: Get Historical Keys
      description: Retrieve previously used keys for non-repudiation of statements.
      responses:
        '200':
          description: Successful retrieval of historical keys
          content:
            application/jwk-set+jwt:
              schema:
                $ref: '#/components/schemas/FederationHistoricalKeysResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                serverError:
                  summary: Server error example
                  value:
                    error: server_error
                    error_description: The server encountered an unexpected condition that prevented it from fulfilling the request.
  /audit:
    get:
      tags:
        - admin
      summary: Get audit logs
      description: Retrieve audit logs with optional filtering by start and end dates.
      parameters:
        - name: startDate
          in: query
          description: The start date for filtering audit logs.
          required: false
          schema:
            type: string
            format: date-time
        - name: endDate
          in: query
          description: The end date for filtering audit logs.
          required: false
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: Successful retrieval of audit logs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AuditLog'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /accounts:
    get:
      tags:
        - admin
      summary: List all accounts
      description: Retrieve a list of all accounts.
      responses:
        '200':
          description: Accounts retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountDTO'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - admin
      summary: Register a new tenant account
      description: Endpoint for an admin to create a new account.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAccountDTO'
      responses:
        '201':
          description: Account created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountDTO'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: 'Conflict (e.g., account already exists)'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/accounts/{username}':
    delete:
      tags:
        - admin
      summary: Delete an account
      description: Endpoint for an admin to delete an account.
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
          description: The username of the account to be deleted.
      responses:
        '200':
          description: Account deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountDTO'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Account not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  '/accounts/{username}/keys':
    post:
      tags:
        - admin
      summary: Create a new key
      description: Create a new key for the specified account.
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
          description: The username of the tenant account.
      responses:
        '201':
          description: Key created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JwkAdminDTO'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    get:
      tags:
        - admin
      summary: List all keys
      description: Retrieve all keys associated with the specified account.
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
          description: The username of the tenant account.
      responses:
        '200':
          description: Keys retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/JwkAdminDTO'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Account not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/accounts/{username}/keys/{keyId}':
    delete:
      tags:
        - admin
      summary: Revoke a key
      description: Revoke a key by its ID for the specified account.
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
          description: The username of the tenant account.
        - name: keyId
          in: path
          required: true
          schema:
            type: integer
          description: The ID of the key to be revoked.
        - name: reason
          in: query
          required: false
          schema:
            type: string
          description: The reason for revoking the key.
      responses:
        '200':
          description: Key revoked successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JwkAdminDTO'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Key or account not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'


  '/accounts/{username}/metadata':
    get:
      tags:
        - admin
      summary: Get entity configuration metadata
      description: Retrieve metadata entries for a specified account.
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
          description: The username of the account to retrieve metadata for.
      responses:
        '200':
          description: Successfully retrieved metadata
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EntityConfigurationMetadataDTO'
        '404':
          description: Account not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - admin
      summary: Create entity configuration metadata
      description: Add a new metadata entry for the specified account.
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
          description: The username of the account to create metadata for.
      requestBody:
        description: Metadata creation data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateMetadataDTO'
      responses:
        '201':
          description: Metadata created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityConfigurationMetadataDTO'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/accounts/{username}/metadata/{id}':
    delete:
      tags:
        - admin
      summary: Delete account metadata
      description: Deletes a specific metadata entry for the specified account.
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
          description: The username of the tenant account.
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: The ID of the metadata entry to be deleted.
      responses:
        '200':
          description: Metadata deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityConfigurationMetadataDTO'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Metadata not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/accounts/{username}/authority-hints':
    get:
      tags:
        - admin
      summary: Get authority hints
      description: Retrieve all authority hints for the specified account.
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
          description: The username of the account to retrieve authority hints for.
      responses:
        '200':
          description: Successfully retrieved authority hints
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AuthorityHint'
        '404':
          description: Account not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - admin
      summary: Create an authority hint
      description: Add a new authority hint for the specified account.
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
          description: The username of the account to create an authority hint for.
      requestBody:
        description: Authority hint data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAuthorityHintDTO'
      responses:
        '201':
          description: Authority hint created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorityHint'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/accounts/{username}/authority-hints/{id}':
    delete:
      tags:
        - admin
      summary: Delete an authority hint
      description: Remove an authority hint by its ID for the specified account.
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
          description: The username of the account to delete the authority hint for.
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: The ID of the authority hint to be deleted.
      responses:
        '200':
          description: Authority hint deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorityHint'
        '404':
          description: Authority hint or account not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/accounts/{username}/entity-statement':
    get:
      tags:
        - admin
      summary: Get entity configuration statement object
      description: Retrieve the entity configuration statement for the specified account.
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
          description: The username of the account to retrieve the entity configuration statement for.
      responses:
        '200':
          description: Successfully retrieved entity configuration statement
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityConfigurationStatement'
        '404':
          description: Account or entity statement not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - admin
      summary: Sign and publish entity configuration statement
      description: Sign and publish the entity configuration statement for the specified account. If `dry-run` is `true`, outputs the signed JWT without publishing it.
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
          description: The username of the account to publish the entity configuration statement for.
      requestBody:
        description: Optional request body for a dry-run
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PublishEntityStatementDTO'
      responses:
        '200':
          description: Entity configuration statement published or validated successfully
          content:
            application/json:
              schema:
                type: string
                description: A message indicating the result of the operation.
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  '/accounts/{username}/subordinates':
    get:
      tags:
        - admin
      summary: Get subordinates
      description: Retrieve all subordinates associated with the specified account.
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
          description: The username of the tenant account.
      responses:
        '200':
          description: Successfully retrieved subordinates
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SubordinateAdminDTO'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - admin
      summary: Create a subordinate
      description: Create a subordinate for the specified account.
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
          description: The username of the tenant account.
      requestBody:
        description: Subordinate creation details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSubordinateDTO'
      responses:
        '201':
          description: Subordinate created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubordinateAdminDTO'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/accounts/{username}/subordinates/{id}':
    delete:
      tags:
        - admin
      summary: Delete subordinate
      description: Deletes a specific subordinate for the specified account.
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
          description: The username of the tenant account.
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: The ID of the subordinate to be deleted.
      responses:
        '200':
          description: Subordinate deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Subordinate deleted successfully
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Subordinate not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  '/accounts/{username}/subordinates/{id}/jwks':
    get:
      tags:
        - admin
      summary: Get subordinate JWKs
      description: Retrieve all JWKs associated with the specified subordinate.
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
          description: The username of the tenant account.
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: The ID of the subordinate.
      responses:
        '200':
          description: Successfully retrieved JWKs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SubordinateJwkDto'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - admin
      summary: Create a subordinate JWK
      description: Create a JWK for the specified subordinate.
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
          description: The username of the tenant account.
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: The ID of the subordinate.
      requestBody:
        description: Metadata creation details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Jwk'
      responses:
        '201':
          description: Subordinate JWK created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubordinateJwkDto'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  '/accounts/{username}/subordinates/{id}/jwks/{jwkId}':
    delete:
      tags:
        - admin
      summary: Delete subordinate JWK
      description: Delete a JWK associated with the specified subordinate.
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
          description: The username of the tenant account.
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: The ID of the subordinate.
        - name: jwkId
          in: path
          required: true
          schema:
            type: integer
          description: The ID of the JWK.
      responses:
        '204':
          description: Subordinate JWK deleted successfully
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  '/accounts/{username}/subordinates/{subordinateId}/metadata':
    get:
      tags:
        - admin
      summary: Get subordinate metadata
      description: Retrieve metadata associated with the specified subordinate.
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
          description: The username of the tenant account.
        - name: subordinateId
          in: path
          required: true
          schema:
            type: integer
          description: The ID of the subordinate.
      responses:
        '200':
          description: Successfully retrieved subordinate metadata
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SubordinateMetadataDTO'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - admin
      summary: Create subordinate metadata
      description: Create metadata for the specified subordinate.
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
          description: The username of the tenant account.
        - name: subordinateId
          in: path
          required: true
          schema:
            type: integer
          description: The ID of the subordinate.
      requestBody:
        description: Metadata creation details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateMetadataDTO'
      responses:
        '201':
          description: Subordinate metadata created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubordinateMetadataDTO'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/accounts/{username}/subordinates/{subordinateId}/metadata/{id}':
    delete:
      tags:
        - admin
      summary: Delete subordinate metadata
      description: Delete metadata associated with the specified subordinate.
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
          description: The username of the tenant account.
        - name: subordinateId
          in: path
          required: true
          schema:
            type: integer
          description: The ID of the subordinate.
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: The ID of the metadata to be deleted.
      responses:
        '200':
          description: Subordinate metadata deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubordinateMetadataDTO'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/accounts/{username}/subordinates/{id}/statement':
    get:
      tags:
        - admin
      summary: Get subordinate statement object
      description: Retrieve the subordinate statement for the specified subordinate.
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
          description: The username of the tenant account.
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: The ID of the subordinate.
      responses:
        '200':
          description: Successfully retrieved subordinate statement
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubordinateStatement'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - admin
      summary: Sign and publish subordinate statement
      description: Sign and publish the subordinate statement for the specified subordinate. If `dry-run` is `true`, outputs the signed JWT without publishing it.
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
          description: The username of the tenant account.
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: The ID of the subordinate.
      requestBody:
        description: Dry-run flag (optional)
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PublishEntityStatementDTO'
      responses:
        '200':
          description: Subordinate statement published successfully
          content:
            application/json:
              schema:
                type: string
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/accounts/{username}/trust-mark-types':
    get:
      summary: Get all Trust Mark Types
      tags:
        - admin
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
          description: The username of the tenant account.
      responses:
        '200':
          description: List of trust mark types
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TrustMarkTypeDTO'

    post:
      summary: Create a Trust Mark Type
      tags:
        - admin
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTrustMarkTypeDTO'
      responses:
        '201':
          description: Trust mark definition created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrustMarkTypeDTO'

  '/accounts/{username}/trust-mark-types/{id}':
    get:
      summary: Get a Trust Mark Type by ID
      tags:
        - admin
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Trust mark definition details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrustMarkTypeDTO'
    delete:
      summary: Delete a Trust Mark Type
      tags:
        - admin
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Trust mark definition deleted
  /accounts/{username}/trust-mark-types/{id}/issuers:
    get:
      tags:
        - admin
      summary: Get Issuers for a Trust Mark Type
      description: Retrieve a list of issuers for the specified Trust Mark Type.
      operationId: getIssuersForTrustMarkType
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
          description: Username associated with the account.
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Identifier of the Trust Mark Type.
      responses:
        '200':
          description: A list of issuer identifiers.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  example: https://issuer.example.com
        '404':
          description: Account or Trust Mark Type not found.
    post:
      tags:
        - admin
      summary: Add Issuer to Trust Mark Type
      description: Add a new issuer to the specified Trust Mark Type.
      operationId: addIssuerToTrustMarkType
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
          description: Username associated with the account.
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Identifier of the Trust Mark Type.
      requestBody:
        description: Details of the issuer to be added.
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - identifier
              properties:
                identifier:
                  type: string
                  description: Identifier of the issuer.
                  example: https://issuer.example.com
      responses:
        '201':
          description: Issuer successfully added to the Trust Mark Type.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    description: Unique ID of the Trust Mark Issuer.
                    example: issuer-123
                  identifier:
                    type: string
                    description: Identifier of the issuer.
                    example: https://issuer.example.com
        '404':
          description: Account or Trust Mark Type not found.
        '400':
          description: Invalid request body.
  /accounts/{username}/trust-mark-types/{id}/issuers/{issuerIdentifier}:
    delete:
      tags:
        - admin
      summary: Remove Issuer from Trust Mark Type
      description: Remove an issuer from the specified Trust Mark Type.
      operationId: removeIssuerFromTrustMarkType
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
          description: Username associated with the account.
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Identifier of the Trust Mark Type.
        - name: issuerIdentifier
          in: path
          required: true
          schema:
            type: string
          description: Identifier of the issuer to be removed.
      responses:
        '200':
          description: Issuer successfully removed from the Trust Mark Type.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    description: Unique ID of the removed Trust Mark Issuer.
                    example: issuer-123
                  identifier:
                    type: string
                    description: Identifier of the removed issuer.
                    example: https://issuer.example.com
        '404':
          description: Account, Trust Mark Type, or Issuer not found.
  '/accounts/{username}/trust-marks':
    post:
      tags:
        - admin
      summary: Create or Update a Trust Mark
      description: Create or update a Trust Mark for the specified account.
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
          description: The username of the tenant account.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                dry_run: # TO-DO Add correct required attributes
                  type: boolean
                  description: 'If true, the entity statement will be generated but not persisted.'
                  default: false
      responses:
        '200':
          description: Trust Mark dry-run successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  trustMarkId:
                    type: string
                    description: The identifier of the created or updated Trust Mark.
        '201':
          description: Trust Mark created or updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  trustMarkId:
                    type: string
                    description: The identifier of the created or updated Trust Mark.
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    get:
      tags:
        - admin
      summary: List Trust Marks
      description: List all Trust Marks for the specified account.
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
          description: The username of the tenant account.
      responses:
        '200':
          description: Successful fetch of Trust Marks
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    trustMarkId:
                      type: string
                      description: The identifier of the Trust Mark.
                    trustMark:
                      type: string
                      description: The JWT of the Trust Mark.
                    entityId:
                      type: string
                      description: The Entity Identifier of the entity to which the Trust Mark is issued.
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/accounts/{username}/trust-marks/{trustMarkId}':
    delete:
      tags:
        - admin
      summary: Delete a Trust Mark
      description: Delete an existing Trust Mark for the specified account.
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
          description: The username of the tenant account.
        - name: trustMarkId
          in: path
          required: true
          schema:
            type: string
          description: The identifier of the Trust Mark to be deleted.
      responses:
        '200':
          description: Trust Mark deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Trust Mark deleted successfully
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Trust Mark not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/accounts/{username}/received-trust-marks':
    post:
      tags:
        - admin
      summary: Create or Update a Received Trust Mark
      description: Create or update a received Trust Mark for the specified account.
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
          description: The username of the account to which the received Trust Mark belongs.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                trustMarkTypeId:
                  type: string
                  description: The identifier of the Trust Mark Type.
                  example: https://example.com/trust-mark-type
                jwt:
                  type: string
                  description: The JWT representing the received Trust Mark.
              required:
                - trustMarkTypeId
                - jwt
      responses:
        '201':
          description: Received Trust Mark created or updated successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  trustMarkId:
                    type: string
                    description: The unique identifier of the created or updated received Trust Mark.
        '400':
          description: Invalid request parameters.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    get:
      tags:
        - admin
      summary: List Received Trust Marks
      description: Retrieve all received Trust Marks for the specified account.
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
          description: The username of the account to list received Trust Marks for.
      responses:
        '200':
          description: Successful fetch of received Trust Marks.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    trustMarkId:
                      type: string
                      description: The unique identifier of the received Trust Mark.
                    trustMarkTypeId:
                      type: string
                      description: The identifier of the Trust Mark Type.
                    issuedJwt:
                      type: string
                      description: The JWT representing the received Trust Mark.
                    receivedAt:
                      type: string
                      format: date-time
                      description: The timestamp when the Trust Mark was received.
        '400':
          description: Invalid request parameters.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  '/accounts/{username}/received-trust-marks/{receivedTrustMarkId}':
    delete:
      tags:
        - admin
      summary: Delete a Received Trust Mark
      description: Delete a specific received Trust Mark for the specified account.
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
          description: The username of the account owning the received Trust Mark.
        - name: receivedTrustMarkId
          in: path
          required: true
          schema:
            type: string
          description: The unique identifier of the received Trust Mark to be deleted.
      responses:
        '200':
          description: Received Trust Mark deleted successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Received Trust Mark deleted successfully.
        '400':
          description: Invalid request parameters.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Received Trust Mark not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'


components:
  schemas:
    BaseEntityStatement:
      type: object
      x-tags:
        - federation
      required:
        - iss
        - sub
        - iat
        - exp
        - jwks
      properties:
        iss:
          type: string
          description: The Entity Identifier of the issuer of the Entity Statement.
        sub:
          type: string
          description: The Entity Identifier of the subject.
        exp:
          type: integer
          description: Expiration time after which the statement MUST NOT be accepted for processing.
        iat:
          type: integer
          format: date-time
          description: The time the statement was issued.
        jwks:
          $ref: '#/components/schemas/EntityJwks'
        metadata:
          additionalProperties: true
        crit:
          type: array
          items:
            type: string
    SubordinateStatement:
      allOf:
        - $ref: '#/components/schemas/BaseEntityStatement'
        - type: object
          required:
            - iss
            - sub
            - iat
            - exp
            - jwks
          properties:
            metadata_policy:
              additionalProperties: true
            crit:
              type: array
              items:
                type: string
            metadata_policy_crit:
              additionalProperties: true
            source_endpoint:
              type: string
              format: uri
              description: String containing the fetch endpoint URL from which the Entity Subordinate Statement was issued.
    Jwk:
      type: object
      x-tags:
        - federation
      required:
        - kty
        - kid
      properties:
        kty:
          type: string
          description: 'The key type (e.g., EC, RSA).'
          example: RSA
        crv:
          type: string
          description: The elliptic curve used (only for EC keys).
          example: P-256
          nullable: true
        kid:
          type: string
          description: The key ID.
          example: 12345
          nullable: true
        x:
          type: string
          description: The X coordinate for EC keys (optional).
          example: o-7zraXKDaoBte2PsuTXo-MSLzsyWdAElNptGgI4aH8
          nullable: true
        'y':
          type: string
          description: The Y coordinate for EC keys (optional).
          example: Xr_wCzJ1XnsgAIV5qHruzSwaNnwy87UjmevVklTpIv8
          nullable: true
        'n':
          type: string
          description: The modulus for RSA keys.
          example: modulus_value
          nullable: true
        e:
          type: string
          description: The exponent for RSA keys.
          example: AQAB
          nullable: true
        alg:
          type: string
          description: The algorithm associated with the key.
          example: ES256
          nullable: true
        use:
          type: string
          description: 'The intended use of the key (e.g., sig, enc).'
          example: sig
          nullable: true
        x5u:
          type: string
          format: uri
          description: A URL that points to an X.509 public key certificate or certificate chain.
          example: 'https://example.com/cert.pem'
          nullable: true
        x5c:
          type: array
          description: The X.509 certificate chain.
          nullable: true
          items:
            type: string
            description: A base64-encoded string representing an X.509 certificate.
            example: MIICoTCCAYkCAQ...
        x5t:
          type: string
          description: The SHA-1 thumbprint of the X.509 certificate.
          example: dGhpcyBpcyBqdXN0IGEgdGh1bWJwcmludA
          nullable: true
        x5tS256:
          type: string
          description: The SHA-256 thumbprint of the X.509 certificate.
          example: sM4KhEI1Y2Sb6-EVr6tJabmJuoP-ZE...
          nullable: true
      description: ''
    EntityConfigurationStatement:
      allOf:
        - $ref: '#/components/schemas/BaseEntityStatement'
        - type: object
          properties:
            authority_hints:
              type: array
              items:
                type: string
            trust_marks:
              type: array
              description: 'An array of JSON objects, each representing a Trust Mark.'
              items:
                $ref: '#/components/schemas/TrustMark'
            trust_mark_issuers:
              $ref: '#/components/schemas/TrustMarkIssuers'
            trust_mark_owners:
              $ref: '#/components/schemas/TrustMarkOwners'
    EntityJwkDTO:
      allOf:
        - $ref: '#/components/schemas/Jwk'
        - type: object
          x-tags:
            - federation
          properties:
            revoked:
              $ref: '#/components/schemas/EntityJwkRevoked'
    EntityJwkRevoked:
      type: object
      x-tags:
        - federation
      required:
        - revoked_at
      properties:
        revoked_at:
          type: string
          format: date-time
        reason:
          type: string
    JwkAdminDTO:
      allOf:
        - $ref: '#/components/schemas/Jwk'
        - type: object
          x-tags:
            - federation
          properties:
            id:
              type: integer
              description: The unique identifier for the JWK record.
              example: 1
            uuid:
              type: string
              format: uuid
              description: The universally unique identifier for the JWK record.
              example: 123e4567-e89b-12d3-a456-426614174000
            account_id:
              type: integer
              description: The ID of the account associated with this JWK.
              example: 100
            revoked_at:
              type: string
              format: date-time
              description: 'The timestamp when the JWK was revoked, if applicable.'
              example: '2024-09-01T12:34:56Z'
              nullable: true
            revoked_reason:
              type: string
              description: 'The reason for revoking the JWK, if applicable.'
              example: Key compromise
              nullable: true
            created_at:
              type: string
              format: date-time
              description: The timestamp when the JWK was created.
              example: '2024-08-06T12:34:56Z'
              nullable: true
    JwkWithPrivateKey:
      allOf:
        - $ref: '#/components/schemas/Jwk'
        - type: object
          x-tags:
            - federation
          properties:
            d:
              type: string
              description: The private key value (for RSA and EC keys).
              example: base64url_encoded_private_key
              nullable: true
            p:
              type: string
              description: The first prime factor (for RSA private key).
              example: base64url_encoded_p
              nullable: true
            q:
              type: string
              description: The second prime factor (for RSA private key).
              example: base64url_encoded_q
              nullable: true
            dp:
              type: string
              description: The first factor CRT exponent (for RSA private key).
              example: base64url_encoded_dp
              nullable: true
            dq:
              type: string
              description: The second factor CRT exponent (for RSA private key).
              example: base64url_encoded_dq
              nullable: true
            qi:
              type: string
              description: The first CRT coefficient (for RSA private key).
              example: base64url_encoded_qi
              nullable: true
    SubordinateJwkDto:
      type: object
      x-tags:
        - federation
      properties:
        id:
          type: integer
          description: The unique identifier for the Subordinate key record.
          example: 1
        subordinate_id:
          type: integer
          description: The ID of the subordinated account associated with this key.
          example: 1
        key:
          additionalProperties: true
        created_at:
          type: string
          format: date-time
          description: The timestamp when the key  was created.
          example: '2024-08-06T12:34:56Z'
          nullable: false
    JWKS:
      type: object
      x-tags:
        - federation
      properties:
        keys:
          type: array
          items:
            $ref: '#/components/schemas/Jwk'
    JWTHeader:
      type: object
      x-tags:
        - federation
      required:
        - kid
      properties:
        alg:
          type: string
          description: 'The algorithm used to sign the JWT (e.g., RS256)'
        kid:
          type: string
          description: The unique identifier for the key used to sign the JWT
        typ:
          type: string
          description: 'The type of token (optional, e.g., "entity-statement+jwt")'
          nullable: true
        trust_chain:
          type: array
          description: An optional list of trust chain certificates or keys
          items:
            type: string
          nullable: true
    JWT:
      type: object
      description: 'A JWT (JSON Web Token) object, composed of a header, payload, and signature.'
      required:
        - header
        - payload
        - signature
      properties:
        header:
          $ref: '#/components/schemas/JWTHeader'
        payload:
          type: object
          description: 'The payload of the JWT, typically containing claims (as JSON key-value pairs).'
          additionalProperties: true
        signature:
          type: string
          description: The cryptographic signature of the JWT.
    EntityJwks:
      type: object
      x-tags:
        - federation
      properties:
        keys:
          type: array
          items:
            $ref: '#/components/schemas/Jwk'
    EntityConfigurationMetadataDTO:
      type: object
      x-tags:
        - federation
      properties:
        id:
          type: integer
          description: The unique identifier for the Entity Configuration Metadata record.
          example: 1
        account_id:
          type: integer
          description: The ID of the account associated with this Entity Configuration Metadata.
          example: 1
        key:
          type: string
          description: The key of the metadata.
          example: openid_relying_party
        metadata:
          additionalProperties: true
        created_at:
          type: string
          format: date-time
          description: The timestamp when the Entity Configuration Metadata was created.
          example: '2024-08-06T12:34:56Z'
          nullable: false
        deleted_at:
          type: string
          format: date-time
          description: The timestamp when the Entity Configuration Metadata was deleted.
          example: '2024-08-06T12:34:56Z'
          nullable: true
    SubordinateMetadataDTO:
      type: object
      x-tags:
        - federation
      properties:
        id:
          type: integer
          description: The unique identifier for the Subordinate Metadata record.
          example: 1
        account_id:
          type: integer
          description: The ID of the account associated with this Metadata.
          example: 1
        subordinate_id:
          type: integer
          description: The ID of the subordinate associated with this Metadata.
          example: 1
        key:
          type: string
          description: The key of the metadata.
          example: openid_relying_party
        metadata:
          additionalProperties: true
        created_at:
          type: string
          format: date-time
          description: The timestamp when the Metadata was created.
          example: '2024-08-06T12:34:56Z'
          nullable: false
        deleted_at:
          type: string
          format: date-time
          description: The timestamp when the Metadata was deleted.
          example: '2024-08-06T12:34:56Z'
          nullable: true
    CreateCritDTO:
      type: object
      x-tags:
        - federation
      properties:
        claim:
          type: string
          description: A critical claims that must be understood and processed.
      required:
        - claim
    MetadataPolicy:
      type: object
      x-tags:
        - federation
      properties:
        federation_entity:
          $ref: '#/components/schemas/FederationEntityMetadata'
        openid_relying_party:
          type: object
        openid_provider:
          type: object
        oauth_authorization_server:
          type: object
        oauth_client:
          type: object
        oauth_resource:
          type: object
    MetadataParameterPolicy:
      type: object
      x-tags:
        - federation
      additionalProperties:
        type: object
    TrustMark:
      type: object
      x-tags:
        - federation
      properties:
        id:
          type: string
          description: The Trust Mark identifier. It MUST be the same value as the id claim contained in the Trust Mark JWT.
          example: example-trust-mark-id
        trust_mark:
          type: string
          description: A signed JSON Web Token that represents a Trust Mark.
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
    TrustMarkIssuers:
      type: object
      x-tags:
        - federation
      description: A mapping of trust mark identifiers to their associated issuers.
      additionalProperties:
        type: array
        description: A list of issuers for the trust mark.
        items:
          type: string
          format: uri
          description: The URI of an issuer for the trust mark.
      example:
        'https://openid.net/certification/op':
          - 'https://example-issuer1.com'
          - 'https://example-issuer2.com'
        'https://refeds.org/wp-content/uploads/2016/01/Sirtfi-1.0.pdf':
          - 'https://swamid.se'
    TrustMarkOwners:
      type: object
      x-tags:
        - federation
      additionalProperties:
        $ref: '#/components/schemas/TrustMarkOwner'
      example:
        'https://refeds.org/wp-content/uploads/2016/01/Sirtfi-1.0.pdf':
          sub: 'https://refeds.org/sirtfi'
          jwks:
            keys:
              - alg: RS256
                e: AQAB
                kid: key1
                kty: RSA
                'n': pnXBOusEANuug6ewezb9J_...
                use: sig
    TrustMarkOwner:
      type: object
      x-tags:
        - federation
      properties:
        sub:
          type: string
          description: Identifier of the Trust Mark owner
        jwks:
          $ref: '#/components/schemas/JWKS'
        additionalProperties:
          type: string
    NamingConstraints:
      type: object
      x-tags:
        - federation
      description: Optional. Restrictions on the URIs of the Entity Identifiers of Subordinate Entities.
      properties:
        permitted:
          type: array
          items:
            type: string
          description: Array of permitted URI name subtrees.
        excluded:
          type: array
          items:
            type: string
          description: Array of excluded URI name subtrees.
    Constraint:
      type: object
      x-tags:
        - federation
      properties:
        max_path_length:
          type: integer
          description: Optional. Maximum number of Intermediate Entities between the Entity setting the constraint and the Trust Chain subject.
        naming_constraints:
          $ref: '#/components/schemas/NamingConstraints'
        allowed_entity_types:
          type: array
          items:
            type: string
          description: Optional. Array of string Entity Type Identifiers. Specifies the Entity Types that Subordinate Entities are allowed to have.
        additionalProperties:
          type: string
    FederationEntityMetadata:
      type: object
      x-tags:
        - federation
      properties:
        federation_fetch_endpoint:
          type: string
          format: uri
          description: URL for the federation fetch endpoint.
        federation_list_endpoint:
          type: string
          format: uri
          description: URL for the federation list endpoint.
        federation_resolve_endpoint:
          type: string
          format: uri
          description: URL for the federation resolve endpoint.
        federation_trust_mark_status_endpoint:
          type: string
          format: uri
          description: URL for the federation trust mark status endpoint.
        federation_trust_mark_list_endpoint:
          type: string
          format: uri
          description: URL for the federation trust mark list endpoint.
        federation_trust_mark_endpoint:
          type: string
          format: uri
          description: URL for the federation trust mark endpoint.
        federation_historical_keys_endpoint:
          type: string
          format: uri
          description: URL for the federation historical keys endpoint.
        organization_name:
          type: string
          description: Organization name.
        homepage_uri:
          type: string
          format: uri
          description: URL for the homepage of the organization.
    OpenIDConnectRelyingPartyClientRegistrationTypes:
      type: string
      x-tags:
        - federation
      description: Client registration types.
      example: automatic
      enum:
        - automatic
        - explicit
    OpenIDConnectRelyingPartyMetadata:
      allOf:
        - $ref: '#/components/schemas/CommonMetadata'
        - $ref: '#/components/schemas/OpenIDConnectDynamicClientRegistrationMetadata'
        - $ref: '#/components/schemas/IANAOAuthDynamicClientRegistrationMetadata'
      type: object
      x-tags:
        - federation
      properties:
        client_registration_types:
          type: array
          items:
            $ref: '#/components/schemas/OpenIDConnectRelyingPartyClientRegistrationTypes'
      required:
        - client_registration_types
    OpenIDProviderRequestAuthenticationMethodsSupported:
      type: object
      x-tags:
        - federation
      description: JSON object where member names are endpoints for request authentication. Values are arrays of methods used at those endpoints.
      properties:
        authorization_endpoint:
          type: array
          items:
            type: string
          description: Array of authentication methods used at the authorization endpoint.
        pushed_authorization_request_endpoint:
          type: array
          items:
            type: string
          description: Array of authentication methods used at the PAR endpoint.
    OpenIDProviderMetadata:
      allOf:
        - $ref: '#/components/schemas/CommonMetadata'
        - $ref: '#/components/schemas/OpenIDConnectDiscoveryProviderMetadata'
        - $ref: '#/components/schemas/IANAOAuthAuthorizationServerMetadata'
      type: object
      x-tags:
        - federation
      required:
        - client_registration_types_supported
      properties:
        client_registration_types_supported:
          type: array
          items:
            type: string
          description: Array specifying the federation types supported. Values are automatic and explicit.
        federation_registration_endpoint:
          type: string
          format: uri
          description: URL of the OP's federation-specific Dynamic Client Registration Endpoint. Must use the https scheme.
        request_authentication_methods_supported:
          $ref: '#/components/schemas/OpenIDProviderRequestAuthenticationMethodsSupported'
        request_authentication_signing_alg_values_supported:
          type: array
          items:
            type: string
          description: JSON array containing supported JWS algorithms for signing the JWT used in the request parameter or private_key_jwt of a pushed authorization request. Must include if specified in request_authentication_methods_supported.
    OAuthAuthorizationServerMetadata:
      allOf:
        - $ref: '#/components/schemas/CommonMetadata'
        - $ref: '#/components/schemas/IANAOAuthAuthorizationServerMetadata'
      type: object
      x-tags:
        - federation
      properties:
        issuer:
          type: string
          description: |
            The authorization server's issuer identifier, which is a URL that uses the "https" scheme and has no query or fragment components. Authorization server metadata is published at a location that is ".well-known" according to RFC 5785 derived from this issuer identifier. The issuer identifier is used to prevent authorization server mix-up attacks.
          example: 'https://example.com'
        authorization_endpoint:
          type: string
          description: URL of the authorization server's authorization endpoint.
          example: 'https://example.com/oauth2/authorize'
        token_endpoint:
          type: string
          description: URL of the authorization server's token endpoint.
          example: 'https://example.com/oauth2/token'
        jwks_uri:
          type: string
          description: URL of the authorization server's JWK Set document.
          example: 'https://example.com/oauth2/jwks'
        registration_endpoint:
          type: string
          description: URL of the authorization server's OAuth 2.0 Dynamic Client Registration endpoint.
          example: 'https://example.com/oauth2/register'
        scopes_supported:
          type: array
          items:
            type: string
          description: JSON array containing a list of the OAuth 2.0 "scope" values that this authorization server supports.
          example:
            - openid
            - profile
            - email
        response_types_supported:
          type: array
          items:
            type: string
          description: JSON array containing a list of the OAuth 2.0 "response_type" values that this authorization server supports.
          example:
            - code
            - token
            - id_token
        response_modes_supported:
          type: array
          items:
            type: string
          description: JSON array containing a list of the OAuth 2.0 "response_mode" values that this authorization server supports.
          example:
            - query
            - fragment
            - form_post
        grant_types_supported:
          type: array
          items:
            type: string
          description: JSON array containing a list of the OAuth 2.0 grant type values that this authorization server supports.
          example:
            - authorization_code
            - implicit
            - client_credentials
            - refresh_token
        token_endpoint_auth_methods_supported:
          type: array
          items:
            type: string
          description: JSON array containing a list of client authentication methods supported by this token endpoint.
          example:
            - client_secret_basic
            - private_key_jwt
        token_endpoint_auth_signing_alg_values_supported:
          type: array
          items:
            type: string
          description: JSON array containing a list of the JWS signing algorithms supported by the token endpoint for the signature on the JWT used to authenticate the client.
          example:
            - RS256
            - ES256
        service_documentation:
          type: string
          description: URL of a page containing human-readable information that developers might want or need to know when using the authorization server.
          example: 'https://example.com/service_documentation'
        ui_locales_supported:
          type: array
          items:
            type: string
          description: 'Languages and scripts supported for the user interface, represented as a JSON array of language tag values from BCP 47.'
          example:
            - en-US
            - fr-FR
        op_policy_uri:
          type: string
          description: URL that the authorization server provides to the person registering the client to read about the authorization server's requirements on how the client can use the data provided by the authorization server.
          example: 'https://example.com/op_policy'
        op_tos_uri:
          type: string
          description: URL that the authorization server provides to the person registering the client to read about the authorization server's terms of service.
          example: 'https://example.com/op_tos'
        revocation_endpoint:
          type: string
          description: URL of the authorization server's OAuth 2.0 revocation endpoint.
          example: 'https://example.com/oauth2/revoke'
        revocation_endpoint_auth_methods_supported:
          type: array
          items:
            type: string
          description: JSON array containing a list of client authentication methods supported by this revocation endpoint.
          example:
            - client_secret_basic
            - private_key_jwt
        revocation_endpoint_auth_signing_alg_values_supported:
          type: array
          items:
            type: string
          description: JSON array containing a list of the JWS signing algorithms supported by the revocation endpoint for the signature on the JWT used to authenticate the client.
          example:
            - RS256
            - ES256
        introspection_endpoint:
          type: string
          description: URL of the authorization server's OAuth 2.0 introspection endpoint.
          example: 'https://example.com/oauth2/introspect'
        introspection_endpoint_auth_methods_supported:
          type: array
          items:
            type: string
          description: JSON array containing a list of client authentication methods supported by this introspection endpoint.
          example:
            - client_secret_basic
            - private_key_jwt
        introspection_endpoint_auth_signing_alg_values_supported:
          type: array
          items:
            type: string
          description: JSON array containing a list of the JWS signing algorithms supported by the introspection endpoint for the signature on the JWT used to authenticate the client.
          example:
            - RS256
            - ES256
        code_challenge_methods_supported:
          type: array
          items:
            type: string
          description: JSON array containing a list of Proof Key for Code Exchange (PKCE) code challenge methods supported by this authorization server.
          example:
            - plain
            - S256
    OAuthClientMetadata:
      allOf:
        - $ref: '#/components/schemas/CommonMetadata'
        - $ref: '#/components/schemas/OAuthDynamicClientMetadata'
        - $ref: '#/components/schemas/IANAOAuthDynamicClientRegistrationMetadata'
      type: object
      x-tags:
        - federation
    OAuthProtectedResourceMetadata:
      allOf:
        - $ref: '#/components/schemas/CommonMetadata'
        - $ref: '#/components/schemas/ProtectedResourceMetadata'
      type: object
      x-tags:
        - federation
    ProtectedResourceMetadata:
      type: object
      x-tags:
        - federation
      properties:
        resource:
          type: string
          format: uri
          description: URL identifier of the protected resource using the https scheme.
        authorization_servers:
          type: array
          items:
            type: string
          description: JSON array of OAuth authorization server issuer identifiers for servers that can be used with this protected resource.
        jwks_uri:
          type: string
          format: uri
          description: 'URL of the protected resource''s JWK Set document, containing its public keys.'
        scopes_supported:
          type: array
          items:
            type: string
          description: JSON array of OAuth 2.0 scope values used in authorization requests to access this protected resource.
        bearer_methods_supported:
          type: array
          items:
            type: string
          description: 'JSON array of supported methods for sending an OAuth 2.0 Bearer Token to the protected resource. Values are ["header", "body", "query"].'
        resource_signing_alg_values_supported:
          type: array
          items:
            type: string
          description: JSON array of JWS signing algorithms supported by the protected resource for signing responses.
        resource_documentation:
          type: string
          format: uri
          description: URL of a page with human-readable information for developers using the protected resource.
        resource_policy_uri:
          type: string
          format: uri
          description: URL to the protected resource's policy document.
        resource_tos_uri:
          type: string
          format: uri
          description: URL to the protected resource's terms of service.
    ErrorResponse:
      type: object
      x-tags:
        - federation
      required:
        - error
        - message
      properties:
        status:
          type: integer
          x-stoplight:
            id: joax1cgth4uzd
        error:
          type: string
        message:
          type: string
          description: A human-readable short text describing the error.
        timestamp:
          type: integer
          x-stoplight:
            id: qtn6mqbzpjctv
    CommonMetadata:
      type: object
      x-tags:
        - federation
      properties:
        organization_name:
          type: string
          description: 'A human-readable name representing the organization owning this Entity. If the owner is a physical person, this MAY be, for example, the person''s name. Note that this information will be publicly available.'
        contacts:
          type: array
          items:
            type: string
          description: 'JSON array with one or more strings representing contact persons at the Entity. These MAY contain names, e-mail addresses, descriptions, phone numbers, etc.'
        logo_uri:
          type: string
          format: uri
          description: A URL that points to the logo of this Entity. The file containing the logo SHOULD be published in a format that can be viewed via the web.
        policy_uri:
          type: string
          format: uri
          description: URL of the documentation of conditions and policies relevant to this Entity.
        homepage_uri:
          type: string
          format: uri
          description: URL of a Web page for the organization owning this Entity.
    ErrorType:
      type: string
      x-tags:
        - federation
      description: One of the predefined error codes.
      example: invalid_request
      enum:
        - invalid_request
        - invalid_client
        - invalid_issuer
        - not_found
        - server_error
        - temporary_unavailable
        - unsupported_parameter
        - invalid_token
        - insufficient_scope
        - unsupported_token_type
        - interaction_required
        - login_required
        - account_selection_required
        - consent_required
        - invalid_request_uri
        - invalid_request_object
        - request_not_supported
        - request_uri_not_supported
        - registration_not_supported
        - need_info
        - request_denied
        - request_submitted
        - authorization_pending
        - access_denied
        - slow_down
        - expired_token
        - invalid_target
        - unsupported_pop_key
        - incompatible_ace_profiles
        - invalid_authorization_details
        - invalid_dpop_proof
        - use_dpop_nonce
        - insufficient_user_authentication
    OAuthDynamicClientTokenEndpointAuthMethod:
      type: string
      x-tags:
        - federation
      description: Requested authentication method for the token endpoint.
      enum:
        - none
        - client_secret_post
        - client_secret_basic
    OAuthDynamicClientGrantTypes:
      type: string
      x-tags:
        - federation
      description: Array of OAuth 2.0 grant type strings the client can use at the token endpoint.
      enum:
        - authorization_code
        - implicit
        - password
        - client_credentials
        - refresh_token
        - 'urn:ietf:params:oauth:grant-type:jwt-bearer'
        - 'urn:ietf:params:oauth:grant-type:saml2-bearer'
    OAuthDynamicClientResponseTypes:
      type: string
      x-tags:
        - federation
      description: Array of OAuth 2.0 response type strings the client can use at the authorization endpoint.
      enum:
        - code
        - token
    CreateMetadataDTO:
      type: object
      properties:
        key:
          type: string
          description: The metadata key.
          example: openid_relying_party
        metadata:
          additionalProperties: true
          description: The metadata object.
      required:
        - key
        - metadata
    PublishEntityStatementDTO:
      type: object
      x-tags:
        - federation
      properties:
        dry-run:
          type: boolean
          description: 'If true, the request will be validated but not persisted.'
          example: false
    OAuthDynamicClientMetadata:
      type: object
      x-tags:
        - federation
      properties:
        redirect_uris:
          type: array
          items:
            type: string
            format: uri
          description: Array of redirection URI strings for redirect-based flows.
        token_endpoint_auth_method:
          $ref: '#/components/schemas/OAuthDynamicClientTokenEndpointAuthMethod'
        grant_types:
          type: array
          items:
            $ref: '#/components/schemas/OAuthDynamicClientGrantTypes'
        response_types:
          type: array
          items:
            $ref: '#/components/schemas/OAuthDynamicClientResponseTypes'
        client_name:
          type: string
          description: Human-readable string name of the client to be presented to the end-user during authorization.
        client_uri:
          type: string
          format: uri
          description: URL string of a web page providing information about the client.
        logo_uri:
          type: string
          format: uri
          description: URL string that references a logo for the client.
        scope:
          type: string
          description: Space-separated list of scope values the client can use when requesting access tokens.
        contacts:
          type: array
          items:
            type: string
          description: 'Array of strings representing ways to contact people responsible for this client, typically email addresses.'
        tos_uri:
          type: string
          format: uri
          description: URL string that points to a human-readable terms of service document for the client.
        policy_uri:
          type: string
          format: uri
          description: URL string that points to a human-readable privacy policy document.
        jwks_uri:
          type: string
          format: uri
          description: 'URL string referencing the client’s JSON Web Key (JWK) Set document, which contains the client’s public keys.'
        jwks:
          $ref: '#/components/schemas/JWKS'
        software_id:
          type: string
          description: Unique identifier string for the client software to be dynamically registered.
        software_version:
          type: string
          description: Version identifier string for the client software identified by software_id.
    OpenIDConnectDynamicClientRegistrationGrantTypes:
      type: string
      x-tags:
        - federation
      description: JSON array containing a list of the OAuth 2.0 Grant Types that the Client is declaring that it will restrict itself to using.
      enum:
        - authorization_code
        - implicit
        - refresh_token
      example:
        - authorization_code
        - implicit
    OpenIDConnectDynamicClientRegistrationApplicationType:
      type: string
      x-tags:
        - federation
      description: 'Kind of the application. The default, if omitted, is web.'
      enum:
        - native
        - web
      example: native
      default: web
    OpenIDConnectDynamicClientRegistrationMetadata:
      type: object
      x-tags:
        - federation
      properties:
        redirect_uris:
          type: array
          items:
            type: string
            format: uri
          description: 'Array of Redirection URI values used by the Client. One of these registered Redirection URI values MUST exactly match the redirect_uri parameter value used in each Authorization Request, with the matching performed as described in Section 6.2.1 of [RFC3986] (Simple String Comparison).'
        response_types:
          type: array
          items:
            type: string
          description: 'JSON array containing a list of the OAuth 2.0 response_type values that the Client is declaring that it will restrict itself to using. If omitted, the default is that the Client will use only the code Response Type.'
        grant_types:
          type: array
          items:
            $ref: '#/components/schemas/OpenIDConnectDynamicClientRegistrationGrantTypes'
        application_type:
          $ref: '#/components/schemas/OpenIDConnectDynamicClientRegistrationApplicationType'
        contacts:
          type: array
          items:
            type: string
          description: Array of e-mail addresses of people responsible for this Client.
        client_name:
          type: string
          description: Name of the Client to be presented to the End-User.
        logo_uri:
          type: string
          format: uri
          description: URL that references a logo for the Client application.
        client_uri:
          type: string
          format: uri
          description: URL of the home page of the Client.
        policy_uri:
          type: string
          format: uri
          description: URL for the Client's policy document.
        tos_uri:
          type: string
          format: uri
          description: URL for the Client's terms of service.
        jwks_uri:
          type: string
          format: uri
          description: URL for the Client's JWK Set document.
        jwks:
          $ref: '#/components/schemas/JWKS'
        sector_identifier_uri:
          type: string
          format: uri
          description: URL for calculating Pseudonymous Identifiers.
        subject_type:
          type: string
          description: Requested subject type for responses to this Client.
        id_token_signed_response_alg:
          type: string
          description: Algorithm for signing the ID Token issued to this Client.
        id_token_encrypted_response_alg:
          type: string
          description: Algorithm for encrypting the ID Token issued to this Client.
        id_token_encrypted_response_enc:
          type: string
          description: Encryption algorithm for the ID Token issued to this Client.
        userinfo_signed_response_alg:
          type: string
          description: Algorithm for signing UserInfo Responses.
        userinfo_encrypted_response_alg:
          type: string
          description: Algorithm for encrypting UserInfo Responses.
        userinfo_encrypted_response_enc:
          type: string
          description: Encryption algorithm for UserInfo Responses.
        request_object_signing_alg:
          type: string
          description: Algorithm for signing Request Objects sent to the OP.
        request_object_encryption_alg:
          type: string
          description: JWE algorithm for encrypting Request Objects sent to the OP.
        request_object_encryption_enc:
          type: string
          description: JWE encryption algorithm for Request Objects sent to the OP.
        token_endpoint_auth_method:
          type: string
          description: Requested Client Authentication method for the Token Endpoint.
        token_endpoint_auth_signing_alg:
          type: string
          description: JWS algorithm for signing the JWT used to authenticate the Client at the Token Endpoint.
        default_max_age:
          type: integer
          description: Default Maximum Authentication Age in seconds.
        require_auth_time:
          type: boolean
          description: Specifies whether the auth_time Claim in the ID Token is required.
        default_acr_values:
          type: array
          items:
            type: string
          description: Default requested Authentication Context Class Reference values.
        initiate_login_uri:
          type: string
          format: uri
          description: URI for third parties to initiate a login by the RP.
        request_uris:
          type: array
          items:
            type: string
            format: uri
          description: Array of pre-registered request_uri values for use at the OP.
      required:
        - redirect_uris
    OpenIDConnectDiscoveryProviderMetadata:
      type: object
      x-tags:
        - federation
      required:
        - issuer
        - authorization_endpoint
        - token_endpoint
        - jwks_uri
        - response_types_supported
        - subject_types_supported
        - id_token_signing_alg_values_supported
      properties:
        issuer:
          type: string
          format: uri
          description: URL using the https scheme with no query or fragment components that the OP asserts as its Issuer Identifier.
        authorization_endpoint:
          type: string
          format: uri
          description: URL of the OP's OAuth 2.0 Authorization Endpoint.
        token_endpoint:
          type: string
          format: uri
          description: URL of the OP's OAuth 2.0 Token Endpoint.
        userinfo_endpoint:
          type: string
          format: uri
          description: URL of the OP's UserInfo Endpoint.
        jwks_uri:
          type: string
          format: uri
          description: URL of the OP's JWK Set document.
        registration_endpoint:
          type: string
          format: uri
          description: URL of the OP's Dynamic Client Registration Endpoint.
        scopes_supported:
          type: array
          items:
            type: string
          description: List of the OAuth 2.0 scope values that this server supports.
        response_types_supported:
          type: array
          items:
            type: string
          description: List of the OAuth 2.0 response_type values that this OP supports.
        response_modes_supported:
          type: array
          items:
            type: string
          description: List of the OAuth 2.0 response_mode values that this OP supports.
        grant_types_supported:
          type: array
          items:
            type: string
          description: List of the OAuth 2.0 Grant Type values that this OP supports.
        acr_values_supported:
          type: array
          items:
            type: string
          description: List of the Authentication Context Class References that this OP supports.
        subject_types_supported:
          type: array
          items:
            type: string
          description: List of the Subject Identifier types that this OP supports.
        id_token_signing_alg_values_supported:
          type: array
          items:
            type: string
          description: List of the JWS signing algorithms supported by the OP for the ID Token.
        id_token_encryption_alg_values_supported:
          type: array
          items:
            type: string
          description: List of the JWE encryption algorithms supported by the OP for the ID Token.
        id_token_encryption_enc_values_supported:
          type: array
          items:
            type: string
          description: List of the JWE encryption algorithms supported by the OP for the ID Token.
        userinfo_signing_alg_values_supported:
          type: array
          items:
            type: string
          description: List of the JWS signing algorithms supported by the UserInfo Endpoint.
        userinfo_encryption_alg_values_supported:
          type: array
          items:
            type: string
          description: List of the JWE encryption algorithms supported by the UserInfo Endpoint.
        userinfo_encryption_enc_values_supported:
          type: array
          items:
            type: string
          description: List of the JWE encryption algorithms supported by the UserInfo Endpoint.
        request_object_signing_alg_values_supported:
          type: array
          items:
            type: string
          description: List of the JWS signing algorithms supported by the OP for Request Objects.
        request_object_encryption_alg_values_supported:
          type: array
          items:
            type: string
          description: List of the JWE encryption algorithms supported by the OP for Request Objects.
        request_object_encryption_enc_values_supported:
          type: array
          items:
            type: string
          description: List of the JWE encryption algorithms supported by the OP for Request Objects.
        token_endpoint_auth_methods_supported:
          type: array
          items:
            type: string
          description: List of Client Authentication methods supported by this Token Endpoint.
        token_endpoint_auth_signing_alg_values_supported:
          type: array
          items:
            type: string
          description: List of the JWS signing algorithms supported by the Token Endpoint.
        display_values_supported:
          type: array
          items:
            type: string
          description: List of the display parameter values that the OpenID Provider supports.
        claim_types_supported:
          type: array
          items:
            type: string
          description: List of the Claim Types that the OpenID Provider supports.
        claims_supported:
          type: array
          items:
            type: string
          description: List of the Claim Names of the Claims that the OpenID Provider may supply values for.
        service_documentation:
          type: string
          format: uri
          description: URL of a page containing human-readable information for developers.
        claims_locales_supported:
          type: array
          items:
            type: string
          description: Languages and scripts supported for values in Claims being returned.
        ui_locales_supported:
          type: array
          items:
            type: string
          description: Languages and scripts supported for the user interface.
        claims_parameter_supported:
          type: boolean
          description: Boolean value specifying whether the OP supports use of the claims parameter.
        request_parameter_supported:
          type: boolean
          description: Boolean value specifying whether the OP supports use of the request parameter.
        request_uri_parameter_supported:
          type: boolean
          description: Boolean value specifying whether the OP supports use of the request_uri parameter.
        require_request_uri_registration:
          type: boolean
          description: Boolean value specifying whether the OP requires any request_uri values used to be pre-registered.
        op_policy_uri:
          type: string
          format: uri
          description: URL to the OP's policy document.
        op_tos_uri:
          type: string
          format: uri
          description: URL to the OP's terms of service document.
    IANAOAuthAuthorizationServerMtlsEndpointAliases:
      type: object
      x-tags:
        - federation
      properties:
        a:
          type: string
      example:
        token_endpoint: 'https://mtls.example.com/token'
        revocation_endpoint: 'https://mtls.example.com/revo'
        introspection_endpoint: 'https://mtls.example.com/introspect'
    IANAOAuthAuthorizationServerMetadata:
      type: object
      x-tags:
        - federation
      properties:
        issuer:
          type: string
          format: uri
          description: URL of the authorization server's issuer identifier.
        authorization_endpoint:
          type: string
          format: uri
          description: URL of the authorization server's authorization endpoint.
        token_endpoint:
          type: string
          format: uri
          description: URL of the authorization server's token endpoint.
        jwks_uri:
          type: string
          format: uri
          description: URL of the authorization server's JWK Set document.
        registration_endpoint:
          type: string
          format: uri
          description: URL of the authorization server's OAuth 2.0 Dynamic Client Registration Endpoint.
        scopes_supported:
          type: array
          items:
            type: string
          description: JSON array of OAuth 2.0 scope values supported by the authorization server.
        response_types_supported:
          type: array
          items:
            type: string
          description: JSON array of OAuth 2.0 response_type values supported by the authorization server.
        response_modes_supported:
          type: array
          items:
            type: string
          description: JSON array of OAuth 2.0 response_mode values supported by the authorization server.
        grant_types_supported:
          type: array
          items:
            type: string
          description: JSON array of OAuth 2.0 grant type values supported by the authorization server.
        token_endpoint_auth_methods_supported:
          type: array
          items:
            type: string
          description: JSON array of client authentication methods supported by the token endpoint.
        token_endpoint_auth_signing_alg_values_supported:
          type: array
          items:
            type: string
          description: JSON array of JWS signing algorithms supported by the token endpoint for the JWT signature used to authenticate the client.
        service_documentation:
          type: string
          format: uri
          description: URL of a page with human-readable information for developers using the authorization server.
        ui_locales_supported:
          type: array
          items:
            type: string
          description: JSON array of BCP 47 language tag values for supported UI languages and scripts.
        op_policy_uri:
          type: string
          format: uri
          description: URL of the authorization server's policy documentation.
        op_tos_uri:
          type: string
          format: uri
          description: URL of the authorization server's terms of service.
        revocation_endpoint:
          type: string
          format: uri
          description: URL of the authorization server's OAuth 2.0 revocation endpoint.
        revocation_endpoint_auth_methods_supported:
          type: array
          items:
            type: string
          description: JSON array of client authentication methods supported by the revocation endpoint.
        revocation_endpoint_auth_signing_alg_values_supported:
          type: array
          items:
            type: string
          description: JSON array of JWS signing algorithms supported by the revocation endpoint for the JWT signature used to authenticate the client.
        introspection_endpoint:
          type: string
          format: uri
          description: URL of the authorization server's OAuth 2.0 introspection endpoint.
        introspection_endpoint_auth_methods_supported:
          type: array
          items:
            type: string
          description: JSON array of client authentication methods supported by the introspection endpoint.
        introspection_endpoint_auth_signing_alg_values_supported:
          type: array
          items:
            type: string
          description: JSON array of JWS signing algorithms supported by the introspection endpoint for the JWT signature used to authenticate the client.
        code_challenge_methods_supported:
          type: array
          items:
            type: string
          description: JSON array of PKCE code challenge methods supported by the authorization server.
        signed_metadata:
          type: string
          format: jwt
          description: Signed JWT containing metadata values about the authorization server as claims.
        device_authorization_endpoint:
          type: string
          format: uri
          description: URL of the authorization server's device authorization endpoint.
        tls_client_certificate_bound_access_tokens:
          type: boolean
          description: Indicates authorization server support for mutual-TLS client certificate-bound access tokens.
        mtls_endpoint_aliases:
          $ref: '#/components/schemas/IANAOAuthAuthorizationServerMtlsEndpointAliases'
        nfv_token_signing_alg_values_supported:
          type: array
          items:
            type: string
          description: JSON array of JWS signing algorithms supported by the server for signing the NFV Token JWT.
        nfv_token_encryption_alg_values_supported:
          type: array
          items:
            type: string
          description: JSON array of JWE encryption algorithms (alg values) supported by the server to encode the NFV Token JWT.
        nfv_token_encryption_enc_values_supported:
          type: array
          items:
            type: string
          description: JSON array of JWE encryption algorithms (enc values) supported by the server to encode the NFV Token JWT.
        userinfo_endpoint:
          type: string
          format: uri
          description: URL of the OP's UserInfo Endpoint.
        acr_values_supported:
          type: array
          items:
            type: string
          description: JSON array of Authentication Context Class References supported by the OP.
        subject_types_supported:
          type: array
          items:
            type: string
          description: JSON array of Subject Identifier types supported by the OP.
        id_token_signing_alg_values_supported:
          type: array
          items:
            type: string
          description: JSON array of JWS signing algorithms supported by the OP for the ID Token.
        id_token_encryption_alg_values_supported:
          type: array
          items:
            type: string
          description: JSON array of JWE encryption algorithms (alg values) supported by the OP for the ID Token.
        id_token_encryption_enc_values_supported:
          type: array
          items:
            type: string
          description: JSON array of JWE encryption algorithms (enc values) supported by the OP for the ID Token.
        userinfo_signing_alg_values_supported:
          type: array
          items:
            type: string
          description: JSON array of JWS signing algorithms supported by the UserInfo Endpoint.
        userinfo_encryption_alg_values_supported:
          type: array
          items:
            type: string
          description: JSON array of JWE encryption algorithms (alg values) supported by the UserInfo Endpoint.
        userinfo_encryption_enc_values_supported:
          type: array
          items:
            type: string
          description: JSON array of JWE encryption algorithms (enc values) supported by the UserInfo Endpoint.
        request_object_signing_alg_values_supported:
          type: array
          items:
            type: string
          description: JSON array of JWS signing algorithms supported by the OP for Request Objects.
        request_object_encryption_alg_values_supported:
          type: array
          items:
            type: string
          description: JSON array of JWE encryption algorithms (alg values) supported by the OP for Request Objects.
        request_object_encryption_enc_values_supported:
          type: array
          items:
            type: string
          description: JSON array of JWE encryption algorithms (enc values) supported by the OP for Request Objects.
        display_values_supported:
          type: array
          items:
            type: string
          description: JSON array of display parameter values supported by the OpenID Provider.
        claim_types_supported:
          type: array
          items:
            type: string
          description: JSON array of Claim Types supported by the OpenID Provider.
        claims_supported:
          type: array
          items:
            type: string
          description: JSON array of Claim Names that the OpenID Provider may supply values for.
        claims_locales_supported:
          type: array
          items:
            type: string
          description: JSON array of BCP 47 language tag values for supported languages and scripts in Claims.
        claims_parameter_supported:
          type: boolean
          description: Boolean value specifying whether the OP supports use of the claims parameter.
        request_parameter_supported:
          type: boolean
          description: Boolean value specifying whether the OP supports use of the request parameter.
        request_uri_parameter_supported:
          type: boolean
          description: Boolean value specifying whether the OP supports use of the request_uri parameter.
        require_request_uri_registration:
          type: boolean
          description: Boolean value specifying whether the OP requires any request_uri values to be pre-registered.
        require_signed_request_object:
          type: boolean
          description: Indicates whether authorization requests need to be protected as a Request Object.
        pushed_authorization_request_endpoint:
          type: string
          format: uri
          description: URL of the authorization server's pushed authorization request endpoint.
        require_pushed_authorization_requests:
          type: boolean
          description: Indicates whether the authorization server accepts authorization requests only via PAR.
        introspection_signing_alg_values_supported:
          type: array
          items:
            type: string
          description: JSON array of algorithms supported by the authorization server for introspection response signing.
        introspection_encryption_alg_values_supported:
          type: array
          items:
            type: string
          description: JSON array of algorithms supported by the authorization server for introspection response content key encryption.
        introspection_encryption_enc_values_supported:
          type: array
          items:
            type: string
          description: JSON array of algorithms supported by the authorization server for introspection response content encryption.
        authorization_response_iss_parameter_supported:
          type: boolean
          description: Boolean value indicating whether the authorization server provides the iss parameter in the authorization response.
        check_session_iframe:
          type: string
          format: uri
          description: URL of an OP iframe for cross-origin session state communication
    IANAOAuthDynamicClientRegistrationMetadata:
      type: object
      x-tags:
        - federation
      properties:
        redirect_uris:
          type: array
          items:
            type: string
            format: uri
          description: Array of redirection URIs for redirect-based flows.
        token_endpoint_auth_method:
          type: string
          description: Requested authentication method for the token endpoint.
        grant_types:
          type: array
          items:
            type: string
          description: Array of OAuth 2.0 grant types the client may use.
        response_types:
          type: array
          items:
            type: string
          description: Array of OAuth 2.0 response types the client may use.
        client_name:
          type: string
          description: Human-readable name of the client presented to the user.
        client_uri:
          type: string
          format: uri
          description: URL of a web page providing information about the client.
        logo_uri:
          type: string
          format: uri
          description: URL that references a logo for the client.
        scope:
          type: string
          description: Space-separated list of OAuth 2.0 scope values.
        contacts:
          type: array
          items:
            type: string
          description: Array of strings representing ways to contact people responsible for this client.
        tos_uri:
          type: string
          format: uri
          description: URL that points to a human-readable terms of service document for the client.
        policy_uri:
          type: string
          format: uri
          description: URL that points to a human-readable policy document for the client.
        jwks_uri:
          type: string
          format: uri
          description: URL referencing the client's JSON Web Key Set document representing the client's public keys.
        jwks:
          $ref: '#/components/schemas/JWKS'
        software_id:
          type: string
          description: Identifier for the software that comprises a client.
        software_version:
          type: string
          description: Version identifier for the software that comprises a client.
        client_id:
          type: string
          description: Client identifier.
        client_secret:
          type: string
          description: Client secret.
        client_id_issued_at:
          type: integer
          description: Time at which the client identifier was issued.
        client_secret_expires_at:
          type: integer
          description: Time at which the client secret will expire.
        registration_access_token:
          type: string
          description: OAuth 2.0 Bearer Token used to access the client configuration endpoint.
        registration_client_uri:
          type: string
          format: uri
          description: Fully qualified URI of the client registration endpoint.
        application_type:
          type: string
          description: 'Kind of the application, either "native" or "web".'
        sector_identifier_uri:
          type: string
          format: uri
          description: URL using the https scheme to be used in calculating Pseudonymous Identifiers by the OP.
        subject_type:
          type: string
          description: 'Subject type requested for responses to this client, either "pairwise" or "public".'
        id_token_signed_response_alg:
          type: string
          description: JWS algorithm required for signing the ID Token issued to this client.
        id_token_encrypted_response_alg:
          type: string
          description: JWE algorithm required for encrypting the ID Token issued to this client.
        id_token_encrypted_response_enc:
          type: string
          description: JWE encryption algorithm required for encrypting the ID Token issued to this client.
        userinfo_signed_response_alg:
          type: string
          description: JWS algorithm required for signing UserInfo Responses.
        userinfo_encrypted_response_alg:
          type: string
          description: JWE algorithm required for encrypting UserInfo Responses.
        userinfo_encrypted_response_enc:
          type: string
          description: JWE encryption algorithm required for encrypting UserInfo Responses.
        request_object_signing_alg:
          type: string
          description: JWS algorithm that must be used for signing Request Objects sent to the OP.
        request_object_encryption_alg:
          type: string
          description: JWE algorithm the RP may use for encrypting Request Objects sent to the OP.
        request_object_encryption_enc:
          type: string
          description: JWE encryption algorithm the RP may use for encrypting Request Objects sent to the OP.
        token_endpoint_auth_signing_alg:
          type: string
          description: JWS algorithm that must be used for signing the JWT used to authenticate the client at the token endpoint.
        default_max_age:
          type: integer
          description: Default Maximum Authentication Age.
        require_auth_time:
          type: boolean
          description: Boolean value specifying whether the auth_time Claim in the ID Token is required.
        default_acr_values:
          type: array
          items:
            type: string
          description: Default requested Authentication Context Class Reference values.
        initiate_login_uri:
          type: string
          format: uri
          description: URI using the https scheme that a third party can use to initiate a login by the RP.
        request_uris:
          type: array
          items:
            type: string
          description: Array of request_uri values that are pre-registered by the RP for use at the OP.
        claims_redirect_uris:
          type: array
          items:
            type: string
          description: Claims redirection endpoints.
        nfv_token_signed_response_alg:
          type: string
          description: JWS algorithm required for signing the nfv Token issued to this client.
        nfv_token_encrypted_response_alg:
          type: string
          description: JWE algorithm required for encrypting the nfv Token issued to this client.
        nfv_token_encrypted_response_enc:
          type: string
          description: JWE encryption algorithm required for encrypting the nfv Token issued to this client.
        tls_client_certificate_bound_access_tokens:
          type: boolean
          description: Indicates the client's intention to use mutual-TLS client certificate-bound access tokens.
        tls_client_auth_subject_dn:
          type: string
          description: Expected subject DN of the client certificate.
        tls_client_auth_san_dns:
          type: string
          description: Expected dNSName SAN entry in the client certificate.
        tls_client_auth_san_uri:
          type: string
          description: Expected uniformResourceIdentifier SAN entry in the client certificate.
        tls_client_auth_san_ip:
          type: string
          description: Expected iPAddress SAN entry in the client certificate.
        tls_client_auth_san_email:
          type: string
          description: Expected rfc822Name SAN entry in the client certificate.
        require_signed_request_object:
          type: boolean
          description: Indicates where authorization request needs to be protected as Request Object.
        require_pushed_authorization_requests:
          type: boolean
          description: Indicates whether the client is required to use PAR to initiate authorization requests.
        introspection_signed_response_alg:
          type: string
          description: Client's desired introspection response signing algorithm.
        introspection_encrypted_response_alg:
          type: string
          description: Desired introspection response content key encryption algorithm.
        introspection_encrypted_response_enc:
          type: string
          description: Desired introspection response content encryption algorithm.
        frontchannel_logout_uri:
          type: string
          format: uri
          description: RP URL that will cause the RP to log itself out when rendered in an iframe by the OP.
        frontchannel_logout_session_required:
          type: boolean
          description: Specifies whether the RP requires a sid query parameter to identify the RP session with the OP.
        backchannel_logout_uri:
          type: string
          format: uri
          description: RP URL that will cause the RP to log itself out when sent a Logout Token by the OP.
        backchannel_logout_session_required:
          type: boolean
          description: Specifies whether the RP requires a sid Claim to identify the RP session with the OP.
        post_logout_redirect_uris:
          type: array
          items:
            type: string
            format: uri
          description: URLs to which the End-User's User Agent may be redirected after logout.
        authorization_details_types:
          type: array
          items:
            type: string
          description: Indicates what authorization details types the client uses.
        dpop_bound_access_tokens:
          type: boolean
          description: Specifies whether the client always uses DPoP for token requests.
    FederationHistoricalKeysResponse:
      type: object
      x-tags:
        - federation
      required:
        - iss
        - iat
        - keys
      properties:
        iss:
          type: string
          format: date-time
          description: The Entity's Entity Identifier.
        iat:
          type: string
          format: date-time
          description: 'Time when the signed JWT was issued, using the time format defined for the iat claim in RFC7519.'
        keys:
          type: array
          items:
            $ref: '#/components/schemas/Jwk'
    ResolveResponse:
      type: object
      x-tags:
        - federation
      required:
        - iss
        - sub
        - iat
        - exp
        - metadata
      properties:
        iss:
          type: string
          format: date-time
          description: Entity Identifier of the issuer of the resolve response.
        sub:
          type: string
          format: date-time
          description: Entity Identifier of the subject of the resolve response.
        iat:
          type: string
          format: date-time
          description: Time when this resolution was issued. This is expressed as Seconds Since the Epoch.
        exp:
          type: string
          format: date-time
          description: Time when this resolution is no longer valid. This is expressed as Seconds Since the Epoch.
        metadata:
          type: object
        trust_marks:
          type: array
          items:
            $ref: '#/components/schemas/TrustMark'
        trust_chain:
          type: array
          items:
            type: string
    StatusResponse:
      type: object
      properties:
        status:
          type: string
          description: The current status of the node.
          example: OK
    SystemStatsResponse:
      type: object
      properties:
        uptime:
          type: string
          description: The system uptime.
          example: '5 days, 4:03:27'
    CreateAccountDTO:
      type: object
      properties:
        username:
          type: string
          description: The username of the account.
          example: acmeco
        identifier:
          type: string
          description: The identifier of the tenant account.
          example: https://www.example.com/oidf

      required:
        - username
    CreateSubordinateDTO:
      type: object
      properties:
        identifier:
          type: string
          description: The identifier of the subordinate account.
          example: 'https://www.example.com/subordinate'
      required:
        - identifier
    SubordinateAdminDTO:
      type: object
      properties:
        id:
          type: integer
          format: int32
          description: The unique identifier of the subordinate.
          example: 123
        accountId:
          type: integer
          format: int32
          description: The ID of the account associated with this subordinate.
          example: 456
        identifier:
          type: string
          description: The unique identifier for the subordinate.
          example: 'https://www.example.com/subordinate'
        createdAt:
          type: string
          format: date-time
          description: The timestamp when the subordinate was created.
          example: '2023-08-21T14:52:00Z'
        deletedAt:
          type: string
          format: date-time
          nullable: true
          description: 'The timestamp when the subordinate was deleted, if applicable.'
          example: '2024-08-21T14:52:00Z'
      required:
        - id
        - accountId
        - identifier
        - createdAt
    AccountDTO:
      type: object
      properties:
        id:
          type: integer
          description: The unique identifier for the account.
          example: 12345
        username:
          type: string
          description: The username of the account.
          example: acmecorp
        identifier:
          type: string
          description: The identifier of the account.
          format: uri
          example: "https://www.example.com/oidf"
          pattern: "^https?:\\/\\/.*$"
    CreateEntityStatementRequest:
      properties:
        dry_run:
          type: boolean
          description: 'If true, the entity statement will be generated but not persisted.'
          default: false
    AuditLog:
      type: object
      properties:
        id:
          type: string
          description: The unique identifier for the audit log entry.
        accountId:
          type: string
          description: The account ID from where the log was generated
        timestamp:
          type: string
          format: date-time
          description: The timestamp of the audit log entry.
        errorLevel:
          $ref: '#/components/schemas/LogLevel'
        errorCode:
          type: string
          description: The error code or type.
        errorMessage:
          type: string
          description: A meaningful explanation of what happened.
        componentName:
          type: string
          description: The name of the component logging the error.
        operation:
          type: string
          description: The operation performed when the error occurred.
        sourceLineNumber:
          type: integer
          description: The source code line number.
        details:
          type: object
    LogLevel:
      type: string
      enum:
        - TRACE
        - DEBUG
        - INFO
        - NOTICE
        - WARN
        - ERROR
        - FATAL
      description: Enum for log levels.
      example: ERROR
    KMS:
      type: string
      enum:
        - LOCAL
      description: Enum for KMS integrations.
      example: LOCAL

    AuthorityHint:
      type: object
      properties:
        id:
          type: integer
          description: The unique identifier for the authority hint.
        identifier:
          type: string
          description: The identifier of the authority hint.
      required:
        - id
        - identifier
    CreateAuthorityHintDTO:
      type: object
      properties:
        identifier:
          type: string
          description: The identifier of the authority hint.
      required:
        - identifier
    CreateTrustMarkTypeDTO:
      type: object
      x-tags:
        - federation
      properties:
        identifier:
          type: string
          description: The unique identifier for the Trust Mark Type.
          example: "example-identifier"
        name:
          type: string
          description: A human-readable name for the Trust Mark Type.
          example: "Example Trust Mark"
        description:
          type: string
          description: A detailed description of the Trust Mark Type.
          example: "This is a trust mark for demonstrating compliance with XYZ standards."
      required:
        - name
    UpdateTrustMarkTypeDTO:
      type: object
      x-tags:
        - federation
      properties:
        name:
          type: string
          description: A human-readable name for the Trust Mark Type.
          example: "Example Trust Mark"
        description:
          type: string
          description: A detailed description of the Trust Mark Type.
          example: "This is a trust mark for demonstrating compliance with XYZ standards."
    TrustMarkTypeDTO:
      type: object
      x-tags:
        - federation
      properties:
        id:
          type: integer
          description: The unique identifier of the Trust Mark Type.
          example: 123
        identifier:
          type: string
          description: The unique identifier for the Trust Mark Type.
          example: "https://www.example.com/oidf/trustmark/underageSafetyVerified"
        name:
          type: string
          description: A human-readable name for the Trust Mark Type.
          example: "Example Trust Mark"
        description:
          type: string
          description: A detailed description of the Trust Mark Type.
          example: "This is a trust mark for demonstrating compliance with XYZ standards."
        createdAt:
          type: string
          format: date-time
          description: The timestamp when the Trust Mark Type was created.
          example: "2024-12-01T12:00:00Z"
        updatedAt:
          type: string
          format: date-time
          description: The timestamp when the Trust Mark Type was last updated.
          example: "2024-12-15T15:30:00Z"
          nullable: true
      required:
        - id
        - identifier
        - name
        - issuerPolicy
        - createdAt
    CreateTrustMarkTypeIssuerDTO:
      type: object
      x-tags:
        - federation
      properties:
        identifier:
          type: string
          description: The entity identifier for the Trust Mark Type Issuer.
          example: "https://www.example.com/oidf"
      required:
        - identifier
    CreateTrustMarkDTO:
      type: object
      description: Data Transfer Object for creating a Trust Mark.
      required:
        - sub
        - trust_mark_type_id
      properties:
        sub:
          type: string
          description: The entity the Trust Mark applies to.
          example: https://entity.example.com
        trust_mark_type_id:
          type: string
          description: Unique identifier of the Trust Mark Type. Should be collision-resistant across federations.
          example: https://trustframework.example.com/marks/12345
        logo_uri:
          type: string
          description: Optional URL to a logo for the Trust Mark entity.
          example: https://example.com/logo.png
        exp:
          type: integer
          description: Optional expiration time of the Trust Mark in seconds since the epoch.
          example: 1706031234
        ref:
          type: string
          description: Optional URL referring to human-readable information about the issuance of the Trust Mark.
          example: https://trustmark-issuer.example.com/info
        delegation:
          type: string
          description: Optional delegation claim as a JWT that delegates the right to issue this Trust Mark.
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
    TrustMarkDTO:
      type: object
      description: Data Transfer Object for retrieving a Trust Mark.
      properties:
        id:
          type: integer
          description: The Trust Mark object id.
          example: 1
        account_id:
          type: integer
          description: The account ID of the Trust Mark issuer.
          example: 123
        sub:
          type: string
          description: The entity the Trust Mark applies to.
          example: https://entity.example.com
        trust_mark_type_identifier:
          type: string
          description: The Trust Mark Type identifier.
          example: "https://www.example.com/oidf/trustmark/underageSafetyVerified"
        trust_mark_value:
          type: string
          description: The Trust Mark JWT.
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        iat:
          type: integer
          description: The time the Trust Mark was issued.
          example: 1706031234
        exp:
          type: integer
          description: The time the Trust Mark expires.
          example: 1706031234
        created_at:
          type: string
          format: date-time
          description: The timestamp when the Trust Mark was created.
          example: "2024-12-01T12:00:00Z"
    TrustMarkObject:
      type: object
      description: Data Transfer Object for retrieving a Trust Mark.
      properties:
        iss:
          type: string
          description: The Trust Mark issuer.
          example: https://www.example.com/oidf
        sub:
          type: string
          description: The entity the Trust Mark applies to.
          example: https://entity.example.com
        id:
          type: string
          description: The Trust Mark Type identifier.
          example: "https://www.example.com/oidf/trustmark/underageSafetyVerified"
        iat:
          type: integer
          description: The time the Trust Mark was issued.
          example: 1706031234
        logo_uri:
          type: string
          description: Optional URL to a logo for the Trust Mark entity.
          example: https://example.com/logo.png
        exp:
          type: integer
          description: The time the Trust Mark expires.
          example: 1706031234
        ref:
          type: string
          description: Optional URL referring to human-readable information about the issuance of the Trust Mark.
          example: https://trustmark-issuer.example.com/info
        delegation:
          type: string
          description: Optional delegation claim as a JWT that delegates the right to issue this Trust Mark.
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
    TrustMarkStatusRequest:
      type: object
      properties:
        sub:
          type: string
          description: The entity the Trust Mark applies to.
          example: https://entity.example.com
        trust_mark_id:
          type: string
          description: The Trust Mark Type identifier.
          example: "https://www.example.com/oidf/trustmark/underageSafetyVerified"
        iat:
          type: integer
          description: The time the Trust Mark was issued.
          example: 1706031234
      required:
        - sub
        - trust_mark_id
    TrustMarkStatusResponse:
      type: object
      properties:
        active:
          type: boolean
          description: The status of the Trust Mark.
          example: true
    TrustMarkListRequest:
      type: object
      properties:
        trust_mark_id:
          type: string
          description: The Trust Mark Type identifier.
          example: "https://www.example.com/oidf/trustmark/underageSafetyVerified"
        sub:
          type: string
          description: The entity the Trust Mark applies to.
          example: https://entity.example.com
      required:
        - trust_mark_id
    TrustMarkRequest:
      type: object
      properties:
        trust_mark_id:
          type: string
          description: The Trust Mark Type identifier.
          example: "https://www.example.com/oidf/trustmark/underageSafetyVerified"
        sub:
          type: string
          description: The entity the Trust Mark applies to.
          example: https://entity.example.com
      required:
        - trust_mark_id
        - sub
    CreateReceivedTrustMarkDTO:
      type: object
      properties:
        trust_mark_type_id:
          type: string
          description: The Trust Mark Type identifier.
          example: "https://www.example.com/oidf/trustmark/underageSafetyVerified"
        jwt:
          type: string
          description: The received Trust Mark JWT.
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
      required:
        - trust_mark_type_id
        - jwt
    ReceivedTrustMarkDTO:
      type: object
      properties:
        id:
          type: integer
          description: The unique identifier for the received Trust Mark.
          example: 123
        account_id:
          type: integer
          description: The account ID of the Trust Mark holder.
          example: 456
        trust_mark_type_identifier:
          type: string
          description: The Trust Mark type identifier.
          example: "https://www.example.com/oidf/trustmark/underageSafetyVerified"
        jwt:
          type: string
          description: The received Trust Mark JWT.
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        created_at:
          type: string
          format: date-time
          description: The timestamp when the Trust Mark was created.
          example: "2024-12-01T12:00:00Z"
