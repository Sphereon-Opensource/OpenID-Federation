package com.sphereon.oid.fed.server.admin.controllersimport com.fasterxml.jackson.databind.ObjectMapperimport com.sphereon.oid.fed.openapi.java.models.CreateAccountimport com.sphereon.oid.fed.openapi.models.Accountimport com.sphereon.oid.fed.server.admin.mappers.toKotlinimport com.sphereon.oid.fed.services.AccountServiceimport com.sphereon.oid.fed.services.LogServiceimport org.hamcrest.Matchers.containsStringimport org.junit.jupiter.api.Testimport org.mockito.Mockito.`when`import org.springframework.beans.factory.annotation.Autowiredimport org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTestimport org.springframework.http.MediaTypeimport org.springframework.security.test.web.servlet.request.SecurityMockMvcRequestPostProcessors.jwtimport org.springframework.test.context.bean.override.mockito.MockitoBeanimport org.springframework.test.web.servlet.MockMvcimport org.springframework.test.web.servlet.request.MockMvcRequestBuilders.postimport org.springframework.test.web.servlet.result.MockMvcResultMatchers.contentimport org.springframework.test.web.servlet.result.MockMvcResultMatchers.status@WebMvcTest(AccountController::class)class AccountControllerTest {    @Autowired    private lateinit var mockMvc: MockMvc    @Autowired    private lateinit var objectMapper: ObjectMapper    @MockitoBean    private lateinit var accountService: AccountService    @MockitoBean    private lateinit var logService: LogService    @Test    fun `should create account with valid data - username and identifier`() {        val createAccount = CreateAccount(username = "testuser", identifier = "https://test-identifier.com")        val mockAccount = Account(id = "1", username = "testuser", identifier = "https://test-identifier.com")        `when`(            accountService.createAccount(                createAccount.toKotlin()            )        ).thenReturn(mockAccount)        mockMvc.perform(            post("/accounts")                .contentType(MediaType.APPLICATION_JSON)                .content(objectMapper.writeValueAsString(createAccount))                .with(jwt())        )            .andExpect(status().isCreated)    }    @Test    fun `should return bad request when username is missing`() {        val invalidJson = "{\"identifier\": \"test-identifier\"}"        mockMvc.perform(            post("/accounts")                .contentType(MediaType.APPLICATION_JSON)                .content(invalidJson)                .with(jwt())        )            .andExpect(status().isBadRequest)    }    @Test    fun `should return bad request when username is empty`() {        val invalidJson = "{\"username\": \"\", \"identifier\": \"test-identifier\"}"        mockMvc.perform(            post("/accounts")                .contentType(MediaType.APPLICATION_JSON)                .content(invalidJson)                .with(jwt())        )            .andExpect(status().isBadRequest)            .andExpect(content().string(containsString("username size must be between 1 and 32")))    }    @Test    fun `should return bad request when username is too long`() {        val createAccount =            CreateAccount(                username = "abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz",                identifier = "test-identifier"            )        mockMvc.perform(            post("/accounts")                .contentType(MediaType.APPLICATION_JSON)                .content(objectMapper.writeValueAsString(createAccount))                .with(jwt())        )            .andExpect(status().isBadRequest)            .andExpect(content().string(containsString("username size must be between 1 and 32")))    }}