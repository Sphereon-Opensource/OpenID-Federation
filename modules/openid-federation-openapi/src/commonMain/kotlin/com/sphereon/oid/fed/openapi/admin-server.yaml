openapi: 3.0.3
tags:
  - name: accounts
    description: Account management operations
  - name: authority-hints
    description: Authority hint management
  - name: keys
    description: Key management and operations
  - name: metadata
    description: Entity metadata management
  - name: subordinates
    description: Subordinate entity management
  - name: trust-marks
    description: Trust Mark management and operations
  - name: system
    description: System and operation logs

info:
  title: OpenID Federation Admin Server API
  description: This API enables management of federated entity data and metadata within an OpenID Federation environment.
  contact:
    name: Sphereon
    email: info@sphereon.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
  version: 0.12.0-d41
servers:
  - url: http://localhost:8081
    description: Admin Server
security:
  - oAuth2: [ ]
  - bearerAuth: [ ]
paths:
  /accounts:
    get:
      tags:
        - accounts
      summary: List all accounts
      operationId: listAccounts
      description: Retrieve a list of all accounts.
      parameters:
        - $ref: '#/components/parameters/AccountUsername'
      responses:
        '200':
          description: Accounts retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountsResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - accounts
      summary: Register a new tenant account
      operationId: registerNewTenantAccount

      description: Endpoint for an admin to create a new account.
      parameters:
        - $ref: '#/components/parameters/AccountUsername'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAccount'
      responses:
        '201':
          description: Account created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: 'Conflict (e.g., account already exists)'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - accounts
      summary: Delete current account
      operationId: deleteCurrentAccount

      description: Delete the account.
      parameters:
        - $ref: '#/components/parameters/AccountUsername'
      responses:
        '200':
          description: Account deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  '/keys':
    get:
      tags:
        - keys
      summary: List all keys
      operationId: listKeys

      description: Retrieve all keys associated with the specified account.
      parameters:
        - $ref: '#/components/parameters/AccountUsername'
      responses:
        '200':
          description: Keys retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountJwksResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Account not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - keys
      summary: Create a new key

      description: Create a new key for the specified account.
      operationId: createKey
      parameters:
        - $ref: '#/components/parameters/AccountUsername'
      requestBody:
        description: Create key data
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateKey'
      responses:
        '201':
          description: Key created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Jwk'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/keys/{keyId}':
    delete:
      tags:
        - keys
      summary: Revoke a key

      description: Revoke a key by its ID for the specified account.
      operationId: revokeKey
      parameters:
        - $ref: '#/components/parameters/AccountUsername'
        - name: keyId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The ID of the key to be revoked.
        - name: reason
          in: query
          required: false
          schema:
            type: string
          description: The reason for revoking the key.
      responses:
        '200':
          description: Key revoked successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Jwk'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Key or account not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/metadata':
    get:
      tags:
        - metadata
      summary: Get entity configuration metadata
      operationId: getEntityMetadata

      description: Retrieve metadata entries for a specified account.
      parameters:
        - $ref: '#/components/parameters/AccountUsername'
      responses:
        '200':
          description: Successfully retrieved metadata
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetadataResponse'
        '404':
          description: Account not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - metadata
      summary: Create entity configuration metadata
      operationId: createEntityMetadata

      description: Add a new metadata entry for the specified account.
      parameters:
        - $ref: '#/components/parameters/AccountUsername'
      requestBody:
        description: Metadata creation data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateMetadata'
      responses:
        '201':
          description: Metadata created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Metadata'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/metadata/{id}':
    delete:
      tags:
        - metadata
      summary: Delete account metadata
      operationId: deleteEntityMetadata

      description: Deletes a specific metadata entry for the specified account.
      parameters:
        - $ref: '#/components/parameters/AccountUsername'
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The ID of the metadata entry to be deleted.
      responses:
        '200':
          description: Metadata deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Metadata'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Metadata not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  '/metadata-policy':
    get:
      tags:
        - metadata-policy
      summary: Get entity configuration metadata policies
      operationId: getEntityMetadataPolicies
      description: Retrieve metadata policy entries for a specified account.
      parameters:
        - $ref: '#/components/parameters/AccountUsername'
      responses:
        '200':
          description: Successfully retrieved metadata policies
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetadataPolicyResponse'
        '404':
          description: Account not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - metadata-policy
      summary: Create entity configuration metadata policy
      operationId: createEntityMetadataPolicy
      description: Add a new metadata policy entry for the specified account.
      parameters:
        - $ref: '#/components/parameters/AccountUsername'
      requestBody:
        description: Metadata policy creation data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateMetadataPolicy'
      responses:
        '201':
          description: Metadata policy created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetadataPolicy'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  '/metadata-policy/{id}':
    delete:
      tags:
        - metadata-policy
      summary: Delete account metadata policy
      operationId: deleteEntityMetadataPolicy
      description: Deletes a specific metadata policy entry for the specified account.
      parameters:
        - $ref: '#/components/parameters/AccountUsername'
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The ID of the metadata policy entry to be deleted.
      responses:
        '200':
          description: Metadata policy deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetadataPolicy'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Metadata policy not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'


  '/authority-hints':
    get:
      tags:
        - authority-hints
      summary: Get authority hints
      operationId: getAuthorityHints

      description: Retrieve all authority hints for the specified account.
      parameters:
        - $ref: '#/components/parameters/AccountUsername'
      responses:
        '200':
          description: Successfully retrieved authority hints
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorityHintsResponse'
        '404':
          description: Account not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - authority-hints
      summary: Create an authority hint
      operationId: createAuthorityHints

      description: Add a new authority hint for the specified account.
      parameters:
        - $ref: '#/components/parameters/AccountUsername'
      requestBody:
        description: Authority hint data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAuthorityHint'
      responses:
        '201':
          description: Authority hint created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorityHint'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/authority-hints/{id}':
    delete:
      tags:
        - authority-hints
      summary: Delete an authority hint

      description: Remove an authority hint by its ID for the specified account.
      operationId: deleteAuthorityHints
      parameters:
        - $ref: '#/components/parameters/AccountUsername'
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The ID of the authority hint to be deleted.
      responses:
        '200':
          description: Authority hint deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorityHint'
        '404':
          description: Authority hint or account not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/entity-statement':
    get:
      tags:
        - entity-statements
      summary: Get entity configuration statement object

      description: Retrieve the entity configuration statement for the specified account.
      operationId: getEntityStatement
      parameters:
        - $ref: '#/components/parameters/AccountUsername'
      responses:
        '200':
          description: Successfully retrieved entity configuration statement
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityConfigurationStatement'
        '404':
          description: Account or entity statement not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - entity-statements
      summary: Sign and publish entity configuration statement
      operationId: signAndPublishEntityStatement

      description: Sign and publish the entity configuration statement for the specified account. If `dryRun` is `true`, outputs the signed JWT without publishing it.
      parameters:
        - $ref: '#/components/parameters/AccountUsername'
      requestBody:
        description: Optional request body for a dryRun
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PublishStatementRequest'
      responses:
        '200':
          description: Entity configuration statement published or validated successfully
          content:
            application/json:
              schema:
                type: string
                description: A message indicating the result of the operation.
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  '/subordinates':
    get:
      tags:
        - subordinates
      summary: Get subordinates
      operationId: listSubordinates

      description: Retrieve all subordinates associated with the specified account.
      parameters:
        - $ref: '#/components/parameters/AccountUsername'
      responses:
        '200':
          description: Successfully retrieved subordinates
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubordinatesResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - subordinates
      summary: Create a subordinate
      operationId: createSubordinate

      description: Create a subordinate for the specified account.
      parameters:
        - $ref: '#/components/parameters/AccountUsername'
      requestBody:
        description: Subordinate creation details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSubordinate'
      responses:
        '201':
          description: Subordinate created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subordinate'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/subordinates/{subordinateId}':
    delete:
      tags:
        - subordinates
      summary: Delete subordinate
      operationId: deleteSubordinate

      description: Deletes a specific subordinate for the specified account.
      parameters:
        - $ref: '#/components/parameters/AccountUsername'
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The ID of the subordinate to be deleted.
      responses:
        '200':
          description: Subordinate deleted successfully
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Subordinate not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  '/subordinates/{subordinateId}/jwks':
    get:
      summary: Get subordinate JWKs
      operationId: listJwksBySubordinateId
      tags:
        - subordinates

      description: Retrieve all JWKs associated with the specified subordinate.
      parameters:
        - $ref: '#/components/parameters/AccountUsername'
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The ID of the subordinate.
      responses:
        '200':
          description: Successfully retrieved JWKs
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubordinateJwksResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - subordinates
      summary: Create a subordinate JWK
      operationId: createSubordinateJwk

      description: Create a JWK for the specified subordinate.
      parameters:
        - $ref: '#/components/parameters/AccountUsername'
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The ID of the subordinate.
      requestBody:
        description: Metadata creation details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Jwk'
      responses:
        '201':
          description: Subordinate JWK created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubordinateJwk'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  '/subordinates/{subordinateId}/jwks/{jwkId}':
    delete:
      tags:
        - subordinates
      summary: Delete subordinate JWK
      operationId: deleteSubordinateJwk

      description: Delete a JWK associated with the specified subordinate.
      parameters:
        - $ref: '#/components/parameters/AccountUsername'
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The ID of the subordinate.
        - name: jwkId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The ID of the JWK.
      responses:
        '200':
          description: Subordinate JWK deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubordinateJwk'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  '/subordinates/{subordinateId}/metadata':
    get:
      tags:
        - subordinates
      summary: Get subordinate metadata
      operationId: getSubordinateMetadata

      description: Retrieve metadata associated with the specified subordinate.
      parameters:
        - $ref: '#/components/parameters/AccountUsername'
        - name: subordinateId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The ID of the subordinate.
      responses:
        '200':
          description: Successfully retrieved subordinate metadata
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubordinateMetadataResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - subordinates
      summary: Create subordinate metadata
      operationId: createSubordinateMetadata

      description: Create metadata for the specified subordinate.
      parameters:
        - $ref: '#/components/parameters/AccountUsername'
        - name: subordinateId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The ID of the subordinate.
      requestBody:
        description: Metadata creation details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateMetadata'
      responses:
        '201':
          description: Subordinate metadata created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubordinateMetadata'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/subordinates/{subordinateIdbordinateId}/metadata/{id}':
    delete:
      tags:
        - subordinates
      summary: Delete subordinate metadata
      operationId: deleteSubordinateMetadata

      description: Delete metadata associated with the specified subordinate.
      parameters:
        - $ref: '#/components/parameters/AccountUsername'
        - name: subordinateId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The ID of the subordinate.
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The ID of the metadata to be deleted.
      responses:
        '200':
          description: Subordinate metadata deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubordinateMetadata'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/subordinates/{subordinateId}/statement':
    get:
      tags:
        - subordinates
      summary: Get subordinate statement object
      operationId: getSubordinateSatement

      description: Retrieve the subordinate statement for the specified subordinate.
      parameters:
        - $ref: '#/components/parameters/AccountUsername'
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The ID of the subordinate.
      responses:
        '200':
          description: Successfully retrieved subordinate statement
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubordinateStatement'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - subordinates
      summary: Sign and publish subordinate statement
      operationId: signAndPublishSubordinateStatement

      description: Sign and publish the subordinate statement for the specified subordinate. If `dryRun` is `true`, outputs the signed JWT without publishing it.
      parameters:
        - $ref: '#/components/parameters/AccountUsername'
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The ID of the subordinate.
      requestBody:
        description: Dry-run flag (optional)
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PublishStatementRequest'
      responses:
        '200':
          description: Subordinate statement published successfully
          content:
            application/json:
              schema:
                type: string
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/trust-mark-types':
    get:
      tags:
        - trust-marks
      summary: Get all Trust Mark Types
      operationId: listTrustMarkTypes

      parameters:
        - $ref: '#/components/parameters/AccountUsername'
      responses:
        '200':
          description: List of trust mark types
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrustMarkTypesResponse'

    post:
      tags:
        - trust-marks
      summary: Create a Trust Mark Type
      operationId: createTrustMarkType

      parameters:
        - $ref: '#/components/parameters/AccountUsername'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTrustMarkType'
      responses:
        '201':
          description: Trust mark definition created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrustMarkType'

  '/trust-mark-types/{id}':
    get:
      tags:
        - trust-marks
      summary: Get a Trust Mark Type by ID
      operationId: getTrustMarkType

      parameters:
        - $ref: '#/components/parameters/AccountUsername'
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Trust mark definition details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrustMarkType'
    delete:
      tags:
        - trust-marks
      summary: Delete a Trust Mark Type
      operationId: deleteTrustMarkType

      parameters:
        - $ref: '#/components/parameters/AccountUsername'
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Trust mark definition deleted
  /trust-mark-types/{id}/issuers:
    get:
      tags:
        - trust-marks
      summary: Get Issuers for a Trust Mark Type

      description: Retrieve a list of issuers for the specified Trust Mark Type.
      operationId: getIssuersForTrustMarkType
      parameters:
        - $ref: '#/components/parameters/AccountUsername'
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Identifier of the Trust Mark Type.
      responses:
        '200':
          description: A list of issuer identifiers.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrustMarkTypeIssuersResponse'
        '404':
          description: Account or Trust Mark Type not found.
    post:
      tags:
        - trust-marks
      summary: Add Issuer to Trust Mark Type

      description: Add a new issuer to the specified Trust Mark Type.
      operationId: addIssuerToTrustMarkType
      parameters:
        - $ref: '#/components/parameters/AccountUsername'
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Identifier of the Trust Mark Type.
      requestBody:
        description: Details of the issuer to be added.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                identifier:
                  type: string
                  description: Identifier of the issuer.
            examples:
              request:
                description: "Example request"
                value:
                  identifier: "https://issuer.example.com"
      responses:
        '201':
          description: Issuer successfully added to the Trust Mark Type.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddTrustMarkIssuerResponse'
              examples:
                response:
                  description: Issuer added to trustmark
                  value:
                    id: "123e4567-e89b-12d3-a456-426614174000"
                    issuer: "https://issuer.example.com"
                    trustMarkTypeId: 1
                    createdAt: "2024-12-01T12:00:00Z"

        '404':
          description: Account or Trust Mark Type not found.
        '400':
          description: Invalid request body.
  /trust-mark-types/{id}/issuers/{issuerIdentifier}:
    delete:
      tags:
        - trust-marks
      summary: Remove Issuer from Trust Mark Type

      description: Remove an issuer from the specified Trust Mark Type.
      operationId: removeIssuerFromTrustMarkType
      parameters:
        - $ref: '#/components/parameters/AccountUsername'
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Identifier of the Trust Mark Type.
        - name: issuerIdentifier
          in: path
          required: true
          schema:
            type: string
          description: Identifier of the issuer to be removed.
      responses:
        '200':
          description: Issuer successfully removed from the Trust Mark Type.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                    description: Unique ID of the removed Trust Mark Issuer.
                  identifier:
                    type: string
                    format: uuid
                    description: Identifier of the removed issuer.
              examples:
                example:
                  value:
                    id: "123e4567-e89b-12d3-a456-426614174000"
                    identifier: https://issuer.example.com
        '404':
          description: Account, Trust Mark Type, or Issuer not found.
  '/trust-marks':
    post:
      tags:
        - trust-marks
      summary: Create or Update a Trust Mark

      description: Create or update a Trust Mark for the specified account.
      operationId: createTrustMark
      parameters:
        - $ref: '#/components/parameters/AccountUsername'
      requestBody:
        $ref: '#/components/requestBodies/CreateTrustMarkRequest'
      responses:
        '200':
          description: Trust Mark dryRun successful
          content:
            application/json:
              schema:
                type: string
                description: A message indicating the result of the operation.
        '201':
          description: Trust Mark created or updated successfully
          content:
            application/json:
              schema:
                type: string
                description: A message indicating the result of the operation.
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    get:
      tags:
        - trust-marks
      summary: List Trust Marks
      operationId: listTrustMarks

      description: List all Trust Marks for the specified account.
      parameters:
        - $ref: '#/components/parameters/AccountUsername'
      responses:
        '200':
          description: Successful fetch of Trust Marks
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrustMarksResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/trust-marks/{trustMarkId}':
    delete:
      tags:
        - trust-marks
      summary: Delete a Trust Mark
      operationId: deleteTrustMark

      description: Delete an existing Trust Mark for the specified account.
      parameters:
        - $ref: '#/components/parameters/AccountUsername'
        - name: trustMarkId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The identifier of the Trust Mark to be deleted.
      responses:
        '200':
          description: Trust Mark deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                example:
                  message: Trust Mark deleted successfully
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Trust Mark not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/received-trust-marks':
    post:
      tags:
        - trust-marks
      summary: Create a Received Trust Mark
      operationId: createReceivedTrustMark

      description: Create or update a received Trust Mark for the specified account.
      parameters:
        - $ref: '#/components/parameters/AccountUsername'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateReceivedTrustMarkResponse'

      responses:
        '201':
          description: Received Trust Mark created successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  trustMarkId:
                    type: string
                    format: uuid
                    description: The unique identifier of the created received Trust Mark.
        '400':
          description: Invalid request parameters.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    get:
      tags:
        - trust-marks
      summary: List Received Trust Marks
      operationId: listReceivedTrustMarks

      description: Retrieve all received Trust Marks for the specified account.
      parameters:
        - $ref: '#/components/parameters/AccountUsername'
      responses:
        '200':
          description: Successful fetch of received Trust Marks.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReceivedTrustMarksResponse'
        '400':
          description: Invalid request parameters.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  '/received-trust-marks/{receivedTrustMarkId}':
    delete:
      tags:
        - trust-marks
      summary: Delete a Received Trust Mark
      operationId: deleteReceivedTrustMark

      description: Delete a specific received Trust Mark for the specified account.
      parameters:
        - $ref: '#/components/parameters/AccountUsername'
        - name: receivedTrustMarkId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The unique identifier of the received Trust Mark to be deleted.
      responses:
        '200':
          description: Received Trust Mark deleted successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Received Trust Mark deleted successfully.
        '400':
          description: Invalid request parameters.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Received Trust Mark not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /status:
    get:
      tags:
        - system
      summary: Check node status
      description: Check the status of the Admin Node.
      security: [ ]
      responses:
        '200':
          description: Successful status check
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        '500':
          $ref: '#/components/responses/ServerError'
      operationId: status

  /logs:
    get:
      summary: Get recent logs
      operationId: getLogs
      tags:
        - system
      description: Retrieve the most recent logs from the system
      parameters:
        - $ref: '#/components/parameters/AccountUsername'
        - name: limit
          in: query
          description: Maximum number of logs to return
          required: false
          schema:
            type: integer
            default: 100
            minimum: 1
            maximum: 1000
      responses:
        '200':
          description: Successful retrieval of logs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Log'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '500':
          $ref: '#/components/responses/ServerError'

  /logs/severity/{severity}:
    get:
      tags:
        - system
      summary: Get logs by severity
      operationId: getLogsBySeverity

      description: Retrieve logs filtered by severity level
      parameters:
        - $ref: '#/components/parameters/AccountUsername'
        - name: severity
          in: path
          description: Severity level to filter by
          required: true
          schema:
            type: string
            enum: [ Verbose, Debug, Info, Warn, Error, Assert ]
        - name: limit
          in: query
          description: Maximum number of logs to return
          required: false
          schema:
            type: integer
            default: 100
            minimum: 1
            maximum: 1000
      responses:
        '200':
          description: Successful retrieval of logs by severity
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Log'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '500':
          $ref: '#/components/responses/ServerError'

  /logs/tag/{tag}:
    get:
      tags:
        - system
      summary: Get logs by tag
      operationId: getLogsByTag

      description: Retrieve logs filtered by tag
      parameters:
        - $ref: '#/components/parameters/AccountUsername'
        - name: tag
          in: path
          description: Tag to filter by
          required: true
          schema:
            type: string
        - name: limit
          in: query
          description: Maximum number of logs to return
          required: false
          schema:
            type: integer
            default: 100
            minimum: 1
            maximum: 1000
      responses:
        '200':
          description: Successful retrieval of logs by tag
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Log'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '500':
          $ref: '#/components/responses/ServerError'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      description: Bearer token authentication
      bearerFormat: JWT
    oAuth2:
      type: oauth2
      flows:
        clientCredentials:
          tokenUrl: http://localhost:8082/realms/openid-federation/protocol/openid-connect/token
          refreshUrl: http://localhost:8082/realms/openid-federation/protocol/openid-connect/token
          scopes: { }
  parameters:
    AccountUsername:
      name: X-Account-Username
      in: header
      description: Optional account username to operate on behalf of
      required: false
      schema:
        type: string
        nullable: true
        default: 'root'
  responses:
    BadRequestError:
      description: Invalid request parameters
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    UnauthorizedError:
      description: Authentication information is missing or invalid
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    ForbiddenError:
      description: The user does not have permission to perform the requested operation
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    ServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    NotFoundError:
      description: The requested resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
  requestBodies:
    CreateTrustMarkRequest:
      content:
        application/json:
          schema:
            type: object
            required:
              - sub
              - trust_mark_id
            properties:
              sub:
                type: string
                description: 'The entity the Trust Mark applies to.'
                example: http://localhost:8080/trust-mark-holder
                minLength: 10
                maxLength: 2048
              trust_mark_id:
                type: string
                description: 'Unique identifier of the Trust Mark Type. Should be collision-resistant across federations.'
                example: http://localhost:8080/trust-mark-types/exampleType
                minLength: 10
                maxLength: 2048
              logo_uri:
                type: string
                format: uri
                description: Optional URL to a logo for the Trust Mark entity.
                example: https://example.com/logo
              exp:
                type: integer
                description: Optional expiration time of the Trust Mark in seconds since the epoch
              ref:
                type: string
                format: uri
                description: Optional URL referring to human-readable information about the issuance of the Trust Mark.
              delegation:
                type: string
                description: Optional delegation claim as a JWT that delegates the right to issue this Trust Mark
              dryRun:
                type: boolean
                description: 'If true, the request will be executed but not persisted.'
                example: false
              iat:
                type: integer
                format: int32
                description: The time for the trust mark was issued.
  schemas:
    AccountsResponse:
      type: object
      properties:
        accounts:
          type: array
          items:
            $ref: '#/components/schemas/Account'
      required:
        - accounts
    Account:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: The unique identifier for the account.
          example: "123e4567-e89b-12d3-a456-426614174000"
        username:
          type: string
          description: The username of the account.
          example: acmecorp
        identifier:
          type: string
          description: The identifier of the account.
          format: uri
          example: "https://www.example.com/oidf"
          pattern: "^https?:\\/\\/.*$"
      required:
        - id
        - username

    AuthorityHintsResponse:
      type: object
      required:
        - authorityHints
      properties:
        authorityHints:
          type: array
          items:
            $ref: '#/components/schemas/AuthorityHint'

    AuthorityHint:
      type: object
      properties:
        id:
          type: string
          format: uuid
        identifier:
          type: string
        accountId:
          type: string
          format: uuid
      required:
        - id
        - identifier
        - accountId
        - admin

    AccountJwksResponse:
      type: object
      required:
        - jwks
      properties:
        jwks:
          type: array
          items:
            $ref: '#/components/schemas/AccountJwk'
    Jwk:
      type: object
      required:
        - kty
        - kid
      properties:
        kty:
          type: string
          description: 'The key type (e.g., EC).'
          example: EC
        crv:
          type: string
          description: The elliptic curve used (only for EC keys).
          example: P-256
          nullable: true
        kid:
          type: string
          description: The key ID.
          example: 12345
        x:
          type: string
          description: The X coordinate for EC keys (optional).
          example: o-7zraXKDaoBte2PsuTXo-MSLzsyWdAElNptGgI4aH8
          nullable: true
        y:
          type: string
          description: The Y coordinate for EC keys (optional).
          example: Xr_wCzJ1XnsgAIV5qHruzSwaNnwy87UjmevVklTpIv8
          nullable: true
        n:
          type: string
          description: The modulus for RSA keys.
          example: modulus_value
          nullable: true
        e:
          type: string
          description: The exponent for RSA keys.
          example: AQAB
          nullable: true
        alg:
          type: string
          description: The algorithm associated with the key.
          example: ES256
          nullable: true
        use:
          type: string
          description: 'The intended use of the key (e.g., sig, enc).'
          example: sig
          nullable: true
        x5u:
          type: string
          format: uri
          description: A URL that points to an X.509 public key certificate or certificate chain.
          example: 'https://example.com/cert.pem'
          nullable: true
        x5c:
          type: array
          description: The X.509 certificate chain.
          nullable: true
          items:
            type: string
            description: A base64-encoded string representing an X.509 certificate.
            example: MIICoTCCAYkCAQ...
        x5t:
          type: string
          description: The SHA-1 thumbprint of the X.509 certificate.
          example: dGhpcyBpcyBqdXN0IGEgdGh1bWJwcmludA
          nullable: true
        x5tS256:
          type: string
          description: The SHA-256 thumbprint of the X.509 certificate.
          example: sM4KhEI1Y2Sb6-EVr6tJabmJuoP-ZE...
          nullable: true

    BaseStatement:
      type: object
      required:
        - iss
        - sub
        - iat
        - exp
        - jwks
      properties:
        iss:
          type: string
          description: The Entity Identifier of the issuer of the Entity Statement.
        sub:
          type: string
          description: The Entity Identifier of the subject.
        exp:
          type: integer
          description: Expiration time after which the statement MUST NOT be accepted for processing.
        iat:
          type: integer
          format: int32
          description: The time the statement was issued.
        jwks:
          type: object
          x-tags:
            - federation
          properties:
            keys:
              type: array
              items:
                $ref: '#/components/schemas/Jwk'
        metadata:
          additionalProperties: true
        crit:
          type: array
          items:
            type: string
    CreateAccount:
      type: object
      properties:
        username:
          type: string
          description: The username of the account.
          example: acmeco
          minLength: 1
          maxLength: 32
        identifier:
          type: string
          description: The identifier of the tenant account.
          example: https://www.example.com/oidf
      required:
        - username

    CreateAuthorityHint:
      type: object
      properties:
        identifier:
          type: string
          description: The identifier of the authority hint.
          minLength: 10
          maxLength: 2048
      required:
        - identifier

    CreateCrit:
      type: object
      properties:
        claim:
          type: string
          description: A critical claims that must be understood and processed.
      required:
        - claim


    CreateKey:
      type: object
      properties:
        kms:
          type: string
          description: The Key Management System to use. Needs to be a supported and configured KMS!
          example: memory
        kmsKeyRef:
          type: string
          description: The KMS Key reference/name you want to use. Not every KMS supports this feature!
          example: my-key
        signatureAlgorithm:
          $ref: '#/components/schemas/SignatureAlgorithm'
      example:
        kmsKeyRef: my-example-key
        signatureAlgorithm: ES256

    SignatureAlgorithm:
      description: The signature algorithm to use in JOSE/JWA format
      type: string
      enum:
        - ES256
        - ES384
        - ES512
      default: ES256

    MetadataResponse:
      type: object
      required:
        - metadata
      properties:
        metadata:
          type: array
          items:
            $ref: '#/components/schemas/Metadata'

    CreateMetadata:
      type: object
      properties:
        key:
          type: string
          description: The metadata key.
          example: openid_relying_party
        metadata:
          additionalProperties: true
          description: The metadata object.
      required:
        - key
        - metadata

    CreateMetadataPolicy:
      type: object
      properties:
        key:
          type: string
          description: The metadata policy key.
          example: openid_relying_party
        policy:
          additionalProperties: true
          description: The metadata policy object.
      required:
        - key
        - policy

    CreateReceivedTrustMark:
      type: object
      properties:
        trust_mark_id:
          type: string
          description: The Trust Mark Type identifier.
          example: "https://www.example.com/oidf/trustmark/underageSafetyVerified"
        jwt:
          type: string
          description: The received Trust Mark JWT.
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
      required:
        - trust_mark_id
        - jwt

    CreateSubordinate:
      type: object
      properties:
        identifier:
          type: string
          description: The identifier of the subordinate account.
          example: 'https://www.example.com/subordinate'
      required:
        - identifier

    CreateTrustMark:
      type: object
      description: Data Transfer Object for creating a Trust Mark.
      required:
        - sub
        - trust_mark_id
      properties:
        sub:
          type: string
          description: The entity the Trust Mark applies to.
          example: https://entity.example.com
        trust_mark_id:
          type: string
          description: Unique identifier of the Trust Mark Type. Should be collision-resistant across federations.
          example: https://trustframework.example.com/marks/12345
        logo_uri:
          type: string
          description: Optional URL to a logo for the Trust Mark entity.
          example: https://example.com/logo.png
        exp:
          type: integer
          description: Optional expiration time of the Trust Mark in seconds since the epoch.
          example: 1706031234
        ref:
          type: string
          description: Optional URL referring to human-readable information about the issuance of the Trust Mark.
          example: https://trustmark-issuer.example.com/info
        delegation:
          type: string
          description: Optional delegation claim as a JWT that delegates the right to issue this Trust Mark.
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...

    TrustMarksResponse:
      type: object
      properties:
        trustMarks:
          type: array
          items:
            $ref: '#/components/schemas/TrustMark'
    #            type: object
    #            properties:
    #              trustMarkId:
    #                type: string
    #                description: The identifier of the Trust Mark.
    #              trustMark:
    #                type: string
    #                description: The JWT of the Trust Mark.
    #              entityId:
    #                type: string
    #                description: The Entity Identifier of the entity to which the Trust Mark is issued.

    CreateTrustMarkType:
      type: object
      properties:
        identifier:
          type: string
          description: The unique identifier for the Trust Mark Type.
          example: "https://www.example.com/oidf/trustmark/underageSafetyVerified"
      required:
        - identifier

    CreateTrustMarkTypeIssuer:
      type: object
      properties:
        identifier:
          type: string
          description: The entity identifier for the Trust Mark Type Issuer.
          example: "https://www.example.com/oidf"
      required:
        - identifier


    EntityConfigurationStatement:
      allOf:
        - $ref: '#/components/schemas/BaseStatement'
        - type: object
          properties:
            authority_hints:
              type: array
              items:
                type: string
            trust_marks:
              type: array
              description: 'An array of JSON objects, each representing a Trust Mark.'
              items:
                $ref: '#/components/schemas/TrustMark'
            trust_mark_issuers:
              $ref: '#/components/schemas/TrustMarkIssuers'
            trust_mark_owners:
              $ref: '#/components/schemas/TrustMarkOwners'


    ErrorResponse:
      type: object
      required:
        - error
        - message
      properties:
        status:
          type: integer
          x-stoplight:
            id: joax1cgth4uzd
        error:
          type: string
        message:
          type: string
          description: A human-readable short text describing the error.
        timestamp:
          type: integer
          x-stoplight:
            id: qtn6mqbzpjctv

    FederationEntityMetadata:
      type: object
      properties:
        federation_fetch_endpoint:
          type: string
          format: uri
          description: URL for the federation fetch endpoint.
        federation_list_endpoint:
          type: string
          format: uri
          description: URL for the federation list endpoint.
        federation_resolve_endpoint:
          type: string
          format: uri
          description: URL for the federation resolve endpoint.
        federation_trust_mark_status_endpoint:
          type: string
          format: uri
          description: URL for the federation trust mark status endpoint.
        federation_trust_mark_list_endpoint:
          type: string
          format: uri
          description: URL for the federation trust mark list endpoint.
        federation_trust_mark_endpoint:
          type: string
          format: uri
          description: URL for the federation trust mark endpoint.
        federation_historical_keys_endpoint:
          type: string
          format: uri
          description: URL for the federation historical keys endpoint.
        organization_name:
          type: string
          description: Organization name.
        homepage_uri:
          type: string
          format: uri
          description: URL for the homepage of the organization.

    FederationHistoricalKeysResponse:
      type: object
      required:
        - iss
        - iat
        - keys
      properties:
        iss:
          type: string
          format: uri
          description: The Entity's Entity Identifier.
        iat:
          type: integer
          description: 'Time when the signed JWT was issued, using the time format defined for the iat claim in RFC7519.'
        keys:
          type: array
          items:
            $ref: '#/components/schemas/HistoricalKey'

    HistoricalKey:
      allOf:
        - $ref: '#/components/schemas/Jwk'
        - type: object
          x-tags:
            - federation
          properties:
            iat:
              type: number
              format: int32
              description: The time the key was issued.
              example: 1629936000
            exp:
              type: number
              format: int32
              description: The time the key will expire.
              example: 1632528000
            revoked:
              $ref: '#/components/schemas/JwkRevoked'

    AccountJwk:
      allOf:
        - $ref: '#/components/schemas/Jwk'
        - type: object
          x-tags:
            - federation
          required:
            - id
          properties:
            id:
              type: string
              format: uuid
              description: The unique identifier for the JWK record.
              example: "123e4567-e89b-12d3-a456-426614174000"
            kms:
              type: string
              description: The Key Management System
              example: memory
            kmsKeyRef:
              type: string
              description: The KMS Key reference (the id of the key in the KMS) if supported
              example: my-key
            accountId:
              type: string
              format: uuid
              description: The ID of the account associated with this JWK.
              example: "123e4567-e89b-12d3-a456-426614174000"
            revokedAt:
              type: string
              format: date-time
              description: 'The timestamp when the JWK was revoked, if applicable.'
              example: '2024-09-01T12:34:56Z'
              nullable: true
            revokedReason:
              type: string
              description: 'The reason for revoking the JWK, if applicable.'
              example: Key compromise
              nullable: true
            createdAt:
              type: string
              format: date-time
              description: The timestamp when the JWK was created.
              example: '2024-08-06T12:34:56Z'
              nullable: true

    JwkRevoked:
      type: object
      required:
        - revokedAt
      properties:
        revokedAt:
          type: string
          format: date-time
        reason:
          type: string

    JwkWithPrivateKey:
      allOf:
        - $ref: '#/components/schemas/Jwk'
        - type: object
          properties:
            d:
              type: string
              description: The private key value (for RSA and EC keys).
              nullable: true
            p:
              type: string
              description: The first prime factor (for RSA private key).
              nullable: true
            q:
              type: string
              description: The second prime factor (for RSA private key).
              nullable: true
            dp:
              type: string
              description: The first factor CRT exponent (for RSA private key).
              nullable: true
            dq:
              type: string
              description: The second factor CRT exponent (for RSA private key).
              nullable: true
            qi:
              type: string
              description: The first CRT coefficient (for RSA private key).
              example: base64url_encoded_qi
              nullable: true


    Jwt:
      type: object
      description: 'A JWT (JSON Web Token) object, composed of a header, payload, and signature.'
      required:
        - header
        - payload
        - signature
      properties:
        header:
          $ref: '#/components/schemas/JwtHeader'
        payload:
          type: object
          description: 'The payload of the JWT, typically containing claims (as JSON key-value pairs).'
          additionalProperties: true
        signature:
          type: string
          description: The cryptographic signature of the JWT.


    JwtHeader:
      type: object
      required:
        - kid
      properties:
        alg:
          type: string
          description: 'The algorithm used to sign the JWT (e.g., RS256)'
        kid:
          type: string
          description: The unique identifier for the key used to sign the JWT
        typ:
          type: string
          description: 'The type of token (optional, e.g., "entity-statement+jwt")'
          nullable: true
        trust_chain:
          type: array
          description: An optional list of trust chain certificates or keys
          items:
            type: string
          nullable: true
    Log:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier for the log entry
        severity:
          type: string
          enum: [ Verbose, Debug, Info, Warn, Error, Assert ]
          description: The severity level of the log entry
        message:
          type: string
          description: The log message
        tag:
          type: string
          description: The tag/category of the log entry
        timestamp:
          type: integer
          format: int64
          description: The timestamp when the event occurred (epoch milliseconds)
        throwable_message:
          type: string
          description: Error message if an exception occurred
          nullable: true
        throwable_stacktrace:
          type: string
          description: Stack trace if an exception occurred
          nullable: true
        metadata:
          type: object
          description: Additional contextual information
          nullable: true
          additionalProperties: true
      required:
        - id
        - severity
        - message
        - tag
        - timestamp

    Metadata:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: The unique identifier for the Metadata record.
          example: "123e4567-e89b-12d3-a456-426614174000"
        accountId:
          type: string
          format: uuid
          description: The ID of the account associated with this Metadata.
          example: "123e4567-e89b-12d3-a456-426614174000"
        key:
          type: string
          description: The key of the metadata.
          example: openid_relying_party
        metadata:
          additionalProperties: true
        createdAt:
          type: string
          format: date-time
          description: The timestamp when the Metadata was created.
          example: '2024-08-06T12:34:56Z'
          nullable: false
        deletedAt:
          type: string
          format: date-time
          description: The timestamp when the Metadata was deleted.
          example: '2024-08-06T12:34:56Z'
          nullable: true

    MetadataPolicy:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: The unique identifier for the Metadata Policy record.
          example: "123e4567-e89b-12d3-a456-426614174000"
        accountId:
          type: string
          format: uuid
          description: The ID of the account associated with this Metadata Policy.
          example: "123e4567-e89b-12d3-a456-426614174000"
        key:
          type: string
          description: The key of the Metadata Policy.
          example: openid_relying_party
        policy:
          additionalProperties: true
        createdAt:
          type: string
          format: date-time
          description: The timestamp when the Metadata Policy was created.
          example: '2024-08-06T12:34:56Z'
          nullable: false
        deletedAt:
          type: string
          format: date-time
          description: The timestamp when the Metadata Policy was deleted.
          example: '2024-08-06T12:34:56Z'
          nullable: true

    MetadataPolicyResponse:
      type: object
      required:
        - metadataPolicies
      properties:
        metadataPolicies:
          type: array
          items:
            $ref: '#/components/schemas/MetadataPolicy'

    PublishStatementRequest:
      type: object
      properties:
        kmsKeyRef:
          type: string
          description: 'The KMS Key reference to use. If not provided the first key for the account will be used unless the kid parameter is set'
          example: "my-jwk-name"
        kid:
          type: string
          description: 'The kid of the key to use. If a kmsKeyRef is provided it will always take priority'
          example: "1234"
        dryRun:
          type: boolean
          description: 'If true, the request will be executed but not persisted.'
          example: false

    ReceivedTrustMarksResponse:
      type: object
      required:
        - receivedTrustMarks
      properties:
        receivedTrustMarks:
          type: array
          items:
            $ref: '#/components/schemas/ReceivedTrustMark'

    CreateReceivedTrustMarkResponse:
      type: object
      properties:
        trustMarkTypeId:
          type: string
          description: The identifier of the Trust Mark Type.
          example: https://example.com/trust-mark-type
        jwt:
          type: string
          description: The JWT representing the received Trust Mark.
      required:
        - trustMarkTypeId
        - jwt

    ReceivedTrustMark:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: The unique identifier for the received Trust Mark.
          example: "123e4567-e89b-12d3-a456-426614174000"
        accountId:
          type: string
          format: uuid
          description: The account ID of the Trust Mark holder.
          example: "123e4567-e89b-12d3-a456-426614174000"
        trust_mark_id:
          type: string
          description: The Trust Mark type identifier.
          example: "https://www.example.com/oidf/trustmark/underageSafetyVerified"
        jwt:
          type: string
          description: The received Trust Mark JWT.
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        createdAt:
          type: string
          format: date-time
          description: The timestamp when the Trust Mark was created.
          example: "2024-12-01T12:00:00Z"

    ResolveResponse:
      type: object
      required:
        - iss
        - sub
        - iat
        - exp
        - metadata
      properties:
        iss:
          type: string
          format: date-time
          description: Entity Identifier of the issuer of the resolve response.
        sub:
          type: string
          format: date-time
          description: Entity Identifier of the subject of the resolve response.
        iat:
          type: string
          format: date-time
          description: Time when this resolution was issued. This is expressed as Seconds Since the Epoch.
        exp:
          type: string
          format: date-time
          description: Time when this resolution is no longer valid. This is expressed as Seconds Since the Epoch.
        metadata:
          type: object
          description: Additional contextual information
          nullable: true
          additionalProperties: true
        trust_marks:
          type: array
          items:
            $ref: '#/components/schemas/TrustMark'
        trust_chain:
          type: array
          items:
            type: string

    SubordinatesResponse:
      type: object
      properties:
        subordinates:
          type: array
          items:
            $ref: '#/components/schemas/Subordinate'
      required:
        - subordinates

    Subordinate:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: The unique identifier of the subordinate.
          example: "123e4567-e89b-12d3-a456-426614174000"
        accountId:
          type: string
          format: uuid
          description: The ID of the account associated with this subordinate.
          example: "123e4567-e89b-12d3-a456-426614174000"
        identifier:
          type: string
          description: The unique identifier for the subordinate.
          example: 'https://www.example.com/subordinate'
        createdAt:
          type: string
          format: date-time
          description: The timestamp when the subordinate was created.
          example: '2023-08-21T14:52:00Z'
        deletedAt:
          type: string
          format: date-time
          nullable: true
          description: 'The timestamp when the subordinate was deleted, if applicable.'
          example: '2024-08-21T14:52:00Z'
      required:
        - id
        - accountId
        - identifier
        - createdAt

    SubordinateJwksResponse:
      type: object
      required:
        - jwks
      properties:
        jwks:
          type: array
          items:
            $ref: '#/components/schemas/SubordinateJwk'

    SubordinateJwk:
      type: object
      required:
        - id
        - subordinateId
        - key
      properties:
        id:
          type: string
          format: uuid
          description: The unique identifier for the Subordinate key record.
          example: "123e4567-e89b-12d3-a456-426614174000"
        subordinateId:
          type: string
          format: uuid
          description: The ID of the subordinated account associated with this key.
          example: "123e4567-e89b-12d3-a456-426614174000"
        key:
          $ref: '#/components/schemas/Jwk'
        createdAt:
          type: string
          format: date-time
          description: The timestamp when the key was created.
          example: '2024-08-06T12:34:56Z'
          nullable: false
    SubordinateMetadataResponse:
      type: object
      properties:
        subordinateMetadata:
          type: array
          items:
            $ref: '#/components/schemas/SubordinateMetadata'
    SubordinateMetadata:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: The unique identifier for the Subordinate Metadata record.
          example: "123e4567-e89b-12d3-a456-426614174000"
        accountId:
          type: string
          format: uuid
          description: The ID of the account associated with this Metadata.
          example: "123e4567-e89b-12d3-a456-426614174000"
        subordinateId:
          type: string
          format: uuid
          description: The ID of the subordinate associated with this Metadata.
          example: "123e4567-e89b-12d3-a456-426614174000"
        key:
          type: string
          description: The key of the metadata.
          example: openid_relying_party
        metadata:
          additionalProperties: true
        createdAt:
          type: string
          format: date-time
          description: The timestamp when the Metadata was created.
          example: '2024-08-06T12:34:56Z'
          nullable: false
        deletedAt:
          type: string
          format: date-time
          description: The timestamp when the Metadata was deleted.
          example: '2024-08-06T12:34:56Z'
          nullable: true
      required:
        - id
        - accountId
        - subordinateId
        - key
        - metadata
        - createdAt

    SubordinateStatement:
      allOf:
        - $ref: '#/components/schemas/BaseStatement'
        - type: object
          required:
            - iss
            - sub
            - iat
            - exp
            - jwks
          properties:
            metadata_policy:
              additionalProperties: true
            crit:
              type: array
              items:
                type: string
            metadata_policy_crit:
              additionalProperties: true
            source_endpoint:
              type: string
              format: uri
              description: String containing the fetch endpoint URL from which the Entity Subordinate Statement was issued.

    SubordinateStatementPayload:
      allOf:
        - $ref: '#/components/schemas/BaseStatement'
        - type: object
          required:
            - iss
            - sub
            - iat
            - exp
            - jwks
          properties:
            metadata_policy:
              additionalProperties: true
            crit:
              type: array
              items:
                type: string
            metadata_policy_crit:
              additionalProperties: true
            source_endpoint:
              type: string
              format: uri
              description: String containing the fetch endpoint URL from which the Entity Subordinate Statement was issued.

    StatusResponse:
      type: object
      properties:
        status:
          type: string
          description: The current status of the node.
          example: UP

    TrustMark:
      type: object
      properties:
        id:
          type: string
          description: The Trust Mark identifier. It MUST be the same value as the id claim contained in the Trust Mark JWT.
          example: example-trust-mark-id
        trust_mark:
          type: string
          description: A signed JSON Web Token that represents a Trust Mark.
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
      required:
        - id
        - trust_mark
    TrustMarkTypeIssuersResponse:
      type: object
      required:
        - issuers
      properties:
        issuers:
          type: array
          items:
            type: string
            example: https://issuer.example.com
    AddTrustMarkIssuerResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique ID of the Trust Mark Issuer for this type.
          example: "123e4567-e89b-12d3-a456-426614174000"
        trustMarkTypeId:
          type: string
          format: uuid
          description: The id of the trustmark type
          example: "123e4567-e89b-12d3-a456-426614174000"
        issuer:
          type: string
          description: The unique identifier for the issuer added to the trustmark.
          example: "https://www.example.com"
        createdAt:
          type: string
          format: date-time
          description: The timestamp when the Trust Mark Type was created.
          example: "2024-12-01T12:00:00Z"

    TrustMarkIssuers:
      type: object
      description: A mapping of trust mark identifiers to their associated issuers.
      additionalProperties:
        type: array
        description: A list of issuers for the trust mark.
        items:
          type: string
          format: uri
          description: The URI of an issuer for the trust mark.
      example:
        'https://openid.net/certification/op':
          - 'https://example-issuer1.com'
          - 'https://example-issuer2.com'
        'https://refeds.org/wp-content/uploads/2016/01/Sirtfi-1.0.pdf':
          - 'https://swamid.se'


    TrustMarkOwners:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/TrustMarkOwner'
      example:
        'https://refeds.org/wp-content/uploads/2016/01/Sirtfi-1.0.pdf':
          sub: 'https://refeds.org/sirtfi'
          jwks:
            keys:
              - alg: RS256
                e: AQAB
                kid: key1
                kmsKeyRef: key1
                kms: memory
                kty: RSA
                'n': pnXBOusEANuug6ewezb9J_...
                use: sig
    TrustMarkOwner:
      type: object
      properties:
        sub:
          type: string
          description: Identifier of the Trust Mark owner
        jwks:
          type: array
          items:
            $ref: '#/components/schemas/Jwk'
        additionalProperties:
          type: string

    TrustMarkPayload:
      type: object
      description: Data Transfer Object for retrieving a Trust Mark.
      properties:
        iss:
          type: string
          description: The Trust Mark issuer.
          example: https://www.example.com/oidf
        sub:
          type: string
          description: The entity the Trust Mark applies to.
          example: https://entity.example.com
        id:
          type: string
          description: The Trust Mark Type identifier.
          example: "https://www.example.com/oidf/trustmark/underageSafetyVerified"
        iat:
          type: integer
          description: The time the Trust Mark was issued.
          example: 1706031234
        logo_uri:
          type: string
          description: Optional URL to a logo for the Trust Mark entity.
          example: https://example.com/logo.png
        exp:
          type: integer
          description: The time the Trust Mark expires.
          example: 1706031234
        ref:
          type: string
          description: Optional URL referring to human-readable information about the issuance of the Trust Mark.
          example: https://trustmark-issuer.example.com/info
        delegation:
          type: string
          description: Optional delegation claim as a JWT that delegates the right to issue this Trust Mark.
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...

    TrustMarkListRequest:
      type: object
      properties:
        trust_mark_id:
          type: string
          description: The Trust Mark Type identifier.
          example: "https://www.example.com/oidf/trustmark/underageSafetyVerified"
        sub:
          type: string
          description: The entity the Trust Mark applies to.
          example: https://entity.example.com
      required:
        - trust_mark_id

    TrustMarkRequest:
      type: object
      properties:
        trust_mark_id:
          type: string
          description: The Trust Mark Type identifier.
          example: "https://www.example.com/oidf/trustmark/underageSafetyVerified"
        sub:
          type: string
          description: The entity the Trust Mark applies to.
          example: https://entity.example.com
      required:
        - trust_mark_id
        - sub

    TrustMarkStatusRequest:
      type: object
      properties:
        sub:
          type: string
          description: The entity the Trust Mark applies to.
          example: https://entity.example.com
        trust_mark_id:
          type: string
          description: The Trust Mark Type identifier.
          example: "https://www.example.com/oidf/trustmark/underageSafetyVerified"
        iat:
          type: integer
          description: The time the Trust Mark was issued.
          example: 1706031234
      required:
        - sub
        - trust_mark_id

    TrustMarkStatusResponse:
      type: object
      properties:
        active:
          type: boolean
          description: The status of the Trust Mark.
          example: true

    TrustMarkTypesResponse:
      type: object
      required:
        - trustMarkTypes
      properties:
        trustMarkTypes:
          type: array
          items:
            $ref: '#/components/schemas/TrustMarkType'

    TrustMarkType:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: The unique identifier of the Trust Mark Type.
          example: "123e4567-e89b-12d3-a456-426614174000"
        identifier:
          type: string
          description: The unique identifier for the Trust Mark Type.
          example: "https://www.example.com/oidf/trustmark/underageSafetyVerified"
        createdAt:
          type: string
          format: date-time
          description: The timestamp when the Trust Mark Type was created.
          example: "2024-12-01T12:00:00Z"
        updatedAt:
          type: string
          format: date-time
          description: The timestamp when the Trust Mark Type was last updated.
          example: "2024-12-15T15:30:00Z"
          nullable: true
      required:
        - id
        - identifier
        - name
        - issuerPolicy
        - createdAt
    VerifyTrustChainResponse:
      type: object
      properties:
        isValid:
          type: boolean
        errorMessage:
          type: string
      required:
        - isValid
    TrustChainResolveResponse:
      type: object
      properties:
        trustChain:
          type: array
          nullable: true
          description: A list of strings representing the resolved trust chain. Each string contains a JWT.
          items:
            type: string
        errorMessage:
          type: string
          nullable: true
          description: Error message in case of a failure, if any.
      required:
        - error
    TrustMarkValidationResponse:
      type: object
      properties:
        isValid:
          type: boolean
        errorMessage:
          type: string
      required:
        - isValid
